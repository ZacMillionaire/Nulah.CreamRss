<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>DEV Community</title>
        <description>The most recent home feed on DEV Community.</description>
        <link>https://dev.to</link>
        <atom:link rel="self" type="application/rss+xml" href="https://dev.to/feed"/>
        <language>en</language>
        <item>
            <title>Mastering File Management with Ansible</title>
            <dc:creator>Labby</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:24:12 +0000</pubDate>
            <link>https://dev.to/labex/mastering-file-management-with-ansible-593o</link>
            <guid>https://dev.to/labex/mastering-file-management-with-ansible-593o</guid>
            <description>&lt;h2&gt;


                Introduction
                &lt;/h2&gt;

                &lt;p&gt;This article covers the following tech skills:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8anzsbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://skills-graph.labex.io/ansible-file-module-289654.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8anzsbt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://skills-graph.labex.io/ansible-file-module-289654.jpg" alt="Skills Graph" width="800" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;In &lt;a href="https://labex.io/tutorials/ansible-file-module-289654" rel="noopener noreferrer"&gt;this lab&lt;/a&gt;, you will explore the Ansible File module, which allows you to manage files and directories on remote hosts. The File module provides a wide range of functionalities, such as creating, deleting, modifying permissions, and checking the existence of files and directories.&lt;/p&gt;

                &lt;h2&gt;


                Create a File on Remote Host
                &lt;/h2&gt;

                &lt;p&gt;In this step, you will create a file on a remote host using the Ansible File module.&lt;/p&gt;

                &lt;p&gt;First, create a new Ansible playbook file called &lt;code&gt;/home/labex/project/file-module-playbook.yaml&lt;/code&gt; and open it in a text editor.&lt;br&gt;
                Add the following content to the playbook file:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;hosts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
                &lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a file on remote host&lt;/span&gt;
                &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/labex/file.txt&lt;/span&gt;
                &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;touch&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;file&lt;/code&gt;: Ansible module to manipulate the file system.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;path&lt;/code&gt;: Specifies the path to the file, in this case &lt;code&gt;/home/labex/file.txt&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;state&lt;/code&gt;: Specifies the state of the file. Here, &lt;code&gt;touch&lt;/code&gt; indicates that the file will be created if it does not exist, or updated with access and modification timestamps if it already exists.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;The purpose of this playbook is to create a file named &lt;code&gt;file.txt&lt;/code&gt; on the remote host.&lt;/p&gt;

                &lt;p&gt;Then, run the playbook using the following command:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ansible-playbook file-module-playbook.yaml
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;WARNING]: No inventory was parsed, only implicit localhost is available
                &lt;span class="o"&gt;[&lt;/span&gt;WARNING]: provided hosts list is empty, only localhost is available. Note that
                the implicit localhost does not match &lt;span class="s1"&gt;'all'&lt;/span&gt;

                PLAY &lt;span class="o"&gt;[&lt;/span&gt;localhost] &lt;span class="k"&gt;***************************************************************&lt;/span&gt;

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Gathering Facts] &lt;span class="k"&gt;*********************************************************&lt;/span&gt;
                ok: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Create a file on remote host] &lt;span class="k"&gt;********************************************&lt;/span&gt;
                changed: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                PLAY RECAP &lt;span class="k"&gt;*********************************************************************&lt;/span&gt;
                localhost                  : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;skipped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;rescued&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;ignored&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Finally, verify that the file &lt;code&gt;file.txt&lt;/code&gt; is created in the specified path on the remote host.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ll /home/labex/file.txt
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; 1 labex labex  0 Mar 10 03:12 file.txt
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;You will see the message indicating that &lt;code&gt;/home/labex/file.txt&lt;/code&gt; was successfully created.&lt;/p&gt;

                &lt;h2&gt;


                Manage File Permissions
                &lt;/h2&gt;

                &lt;p&gt;In this step, you will learn how to manage file permissions on a remote host using the Ansible File module.&lt;/p&gt;

                &lt;p&gt;First, modify the existing playbook file by removing all content and adding the following content to the playbook file:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;hosts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
                &lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set file permissions&lt;/span&gt;
                &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/labex/file.txt&lt;/span&gt;
                &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0644"&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;file&lt;/code&gt;: Ansible module to manipulate the file system.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;path&lt;/code&gt;: Specifies the path to the file, in this case &lt;code&gt;/home/labex/file.txt&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;mode&lt;/code&gt;: This parameter is used to set the permission mode of the file. Replace &lt;code&gt;"0644"&lt;/code&gt; with the desired permission mode for the file. Refer to the &lt;a href="https://en.wikipedia.org/wiki/Chmod" rel="noopener noreferrer"&gt;chmod&lt;/a&gt; documentation for more information on permission modes.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;The purpose of this playbook is to set the permissions of the file &lt;code&gt;/home/labex/file.txt&lt;/code&gt; to &lt;code&gt;0644&lt;/code&gt;.&lt;/p&gt;

                &lt;p&gt;Then, run the playbook using the following command:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ansible-playbook file-module-playbook.yaml
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;WARNING]: No inventory was parsed, only implicit localhost is available
                &lt;span class="o"&gt;[&lt;/span&gt;WARNING]: provided hosts list is empty, only localhost is available. Note that
                the implicit localhost does not match &lt;span class="s1"&gt;'all'&lt;/span&gt;

                PLAY &lt;span class="o"&gt;[&lt;/span&gt;localhost] &lt;span class="k"&gt;***************************************************************&lt;/span&gt;

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Gathering Facts] &lt;span class="k"&gt;*********************************************************&lt;/span&gt;
                ok: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Set file permissions] &lt;span class="k"&gt;****************************************************&lt;/span&gt;
                changed: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                PLAY RECAP &lt;span class="k"&gt;*********************************************************************&lt;/span&gt;
                localhost                  : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;skipped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;rescued&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;ignored&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Finally, verify that the file permissions are set as specified on the remote host.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ll /home/labex/file.txt
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 labex labex 0 Mar 10 03:12 /home/labex/file.txt
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;The &lt;code&gt;-rw-r--r--&lt;/code&gt; here indicates that the mode of &lt;code&gt;/home/labex/file.txt&lt;/code&gt; has been successfully set to &lt;code&gt;0644&lt;/code&gt;.&lt;/p&gt;

                &lt;h2&gt;


                Delete a File on Remote Host
                &lt;/h2&gt;

                &lt;p&gt;In this step, you will learn how to delete a file on a remote host using the Ansible File module.&lt;/p&gt;

                &lt;p&gt;First, modify the existing playbook file by removing all content and adding the following content to the playbook file:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;hosts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
                &lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Delete a file on remote host&lt;/span&gt;
                &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/labex/file.txt&lt;/span&gt;
                &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;absent&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;file&lt;/code&gt;: Ansible module to manipulate the file system.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;path&lt;/code&gt;: Specifies the path to the file to be deleted, i.e. &lt;code&gt;/home/labex/file.txt&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;state&lt;/code&gt;: This parameter indicates that the file should be in the &lt;code&gt;absent&lt;/code&gt; state. Therefore, the goal of the task is to delete the file at the specified path.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;The purpose of this playbook is to delete the file &lt;code&gt;/home/labex/file.txt&lt;/code&gt; on the remote host.&lt;/p&gt;

                &lt;p&gt;Then, run the playbook using the following command:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ansible-playbook file-module-playbook.yaml
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;WARNING]: No inventory was parsed, only implicit localhost is available
                &lt;span class="o"&gt;[&lt;/span&gt;WARNING]: provided hosts list is empty, only localhost is available. Note that
                the implicit localhost does not match &lt;span class="s1"&gt;'all'&lt;/span&gt;

                PLAY &lt;span class="o"&gt;[&lt;/span&gt;localhost] &lt;span class="k"&gt;***************************************************************&lt;/span&gt;

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Gathering Facts] &lt;span class="k"&gt;*********************************************************&lt;/span&gt;
                ok: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Delete a file on remote host] &lt;span class="k"&gt;********************************************&lt;/span&gt;
                changed: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                PLAY RECAP &lt;span class="k"&gt;*********************************************************************&lt;/span&gt;
                localhost                  : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;skipped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;rescued&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;ignored&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Finally, verify that the file &lt;code&gt;file.txt&lt;/code&gt; is deleted and no longer exists on the remote host.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ll /home/labex/file.txt
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls&lt;/span&gt;: cannot access &lt;span class="s1"&gt;'/home/labex/file.txt'&lt;/span&gt;: No such file or directory
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;This message indicates that the &lt;code&gt;/home/labex/file.txt&lt;/code&gt; file was successfully deleted.&lt;/p&gt;

                &lt;h2&gt;


                Check File Existence
                &lt;/h2&gt;

                &lt;p&gt;In this step, you will learn how to check the existence of a file on a remote host using the Ansible File module.&lt;/p&gt;

                &lt;p&gt;First, modify the existing playbook file by removing all content and adding the following content to the playbook file:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;hosts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
                &lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check file existence on remote host&lt;/span&gt;
                &lt;span class="na"&gt;stat&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/labex/file.txt&lt;/span&gt;
                &lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;file_info&lt;/span&gt;

                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Print file existence&lt;/span&gt;
                &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;File&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;exists:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file_info.stat.exists&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;stat&lt;/code&gt;: This is one of Ansible's modules for getting status information about a file or directory.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;path&lt;/code&gt;: Specifies the path to the file to check, i.e. &lt;code&gt;/home/labex/file.txt&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;register&lt;/code&gt;: Stores the result of the module execution in the variable &lt;code&gt;file_info&lt;/code&gt; using the register keyword.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;debug&lt;/code&gt;: This is one of the Ansible modules that prints debugging information.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;msg&lt;/code&gt;: Use the &lt;code&gt;debug&lt;/code&gt; module to print a message with information about the existence of a file, which is retrieved via &lt;code&gt;file_info.stat.exists&lt;/code&gt;.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;The purpose of this playbook is to check for the existence of the file &lt;code&gt;/home/labex/file.txt&lt;/code&gt; on the remote host and print the information to standard output.&lt;/p&gt;

                &lt;p&gt;Then, run the playbook using the following command:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;ansible-playbook file-module-playbook.yaml
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Example output:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;WARNING]: No inventory was parsed, only implicit localhost is available
                &lt;span class="o"&gt;[&lt;/span&gt;WARNING]: provided hosts list is empty, only localhost is available. Note that
                the implicit localhost does not match &lt;span class="s1"&gt;'all'&lt;/span&gt;

                PLAY &lt;span class="o"&gt;[&lt;/span&gt;localhost] &lt;span class="k"&gt;***************************************************************&lt;/span&gt;

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Gathering Facts] &lt;span class="k"&gt;*********************************************************&lt;/span&gt;
                ok: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Check file existence on remote host] &lt;span class="k"&gt;*************************************&lt;/span&gt;
                ok: &lt;span class="o"&gt;[&lt;/span&gt;localhost]

                TASK &lt;span class="o"&gt;[&lt;/span&gt;Print file existence] &lt;span class="k"&gt;****************************************************&lt;/span&gt;
                ok: &lt;span class="o"&gt;[&lt;/span&gt;localhost] &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"msg"&lt;/span&gt;: &lt;span class="s2"&gt;"File exists: False"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;

                PLAY RECAP &lt;span class="k"&gt;*********************************************************************&lt;/span&gt;
                localhost                  : &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3    &lt;span class="nv"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;unreachable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;skipped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;rescued&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0    &lt;span class="nv"&gt;ignored&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Finally, observe the output to see if the file &lt;code&gt;file.txt&lt;/code&gt; exists on the remote host.&lt;br&gt;
                &lt;code&gt;"msg": "File exists: False"&lt;/code&gt; indicates that the &lt;code&gt;/home/labex/file.txt&lt;/code&gt; file does not exist.&lt;/p&gt;

                &lt;h2&gt;


                Summary
                &lt;/h2&gt;

                &lt;p&gt;Congratulations! You have successfully completed the Ansible File Module lab. You have learned how to create files and directories, manage file permissions, delete files, and check file existence on remote hosts using the File module.&lt;/p&gt;

                &lt;p&gt;The File module is a powerful tool in Ansible that enables you to perform various file-related operations during automation tasks. You can now confidently use the File module in your Ansible playbooks to manage files and directories efficiently.&lt;/p&gt;

                &lt;p&gt;Keep exploring the Ansible documentation and other modules to expand your knowledge and improve your automation skills. Happy Ansible-ing!&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw-7jNJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/authcode/%3Fcode%3DNzhlNDRmNDlkNTUzZDE0ODkzNjU0ODUzYzk0MGIwZjBfMTdmMWEwOTU5NjVmZThkZjY3MDYyOGMwYjlhZTAwYjRfSUQ6NzM5MDU4NDg3ODc2NzI3NjAzNF8xNzIwNzU0NjUxOjE3MjA4NDEwNTFfVjM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw-7jNJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/authcode/%3Fcode%3DNzhlNDRmNDlkNTUzZDE0ODkzNjU0ODUzYzk0MGIwZjBfMTdmMWEwOTU5NjVmZThkZjY3MDYyOGMwYjlhZTAwYjRfSUQ6NzM5MDU4NDg3ODc2NzI3NjAzNF8xNzIwNzU0NjUxOjE3MjA4NDEwNTFfVjM" alt="MindMap" width="800" height="1764"&gt;&lt;/a&gt;&lt;/p&gt;




                &lt;blockquote&gt;
                &lt;p&gt;🚀 Practice Now: &lt;a href="https://labex.io/tutorials/ansible-file-module-289654" rel="noopener noreferrer"&gt;Ansible File Module&lt;/a&gt;&lt;/p&gt;
                &lt;/blockquote&gt;




                &lt;h2&gt;


                Want to Learn More?
                &lt;/h2&gt;

                &lt;ul&gt;
                &lt;li&gt;🌳 Learn the latest &lt;a href="https://labex.io/skilltrees/ansible" rel="noopener noreferrer"&gt;Ansible Skill Trees&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;📖 Read More &lt;a href="https://labex.io/tutorials/category/ansible" rel="noopener noreferrer"&gt;Ansible Tutorials&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;💬 Join our &lt;a href="https://discord.gg/J6k3u69nU6" rel="noopener noreferrer"&gt;Discord&lt;/a&gt; or tweet us &lt;a href="https://twitter.com/WeAreLabEx" rel="noopener noreferrer"&gt;@WeAreLabEx&lt;/a&gt;
                &lt;/li&gt;
                &lt;/ul&gt;

            </description>
            <category>ansible</category>
            <category>coding</category>
            <category>programming</category>
            <category>tutorial</category>
        </item>
        <item>
            <title>ข้อมูล JSON ใน PostgreSQL: โลกใหม่ของการจัดการข้อมูลบน Postgres</title>
            <dc:creator>iconnext</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:22:09 +0000</pubDate>
            <link>https://dev.to/iconnext/khmuul-json-ain-postgresql-olkaihmkhngkaarcchadkaarkhmuulbn-postgres-3omk</link>
            <guid>https://dev.to/iconnext/khmuul-json-ain-postgresql-olkaihmkhngkaarcchadkaarkhmuulbn-postgres-3omk</guid>
            <description>&lt;p&gt;&lt;strong&gt;เกรินนำ&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;PostgreSQL ไม่เพียงแค่เป็นฐานข้อมูลที่มีความสามารถสูง แต่ยังมีฟีเจอร์สำหรับการจัดการข้อมูล JSON ที่ทรงพลังอีกด้วย วันนี้เราจะพาคุณสำรวจโลกของ JSON ใน PostgreSQL ที่จะทำให้การจัดการข้อมูลของคุณเป็นเรื่องง่ายและสนุกขึ้น!&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;ว่าแต่ JSON คืออะไร?&lt;/strong&gt;&lt;br&gt;
                JSON (JavaScript Object Notation) เป็นรูปแบบข้อมูลที่ใช้สำหรับการแลกเปลี่ยนข้อมูลระหว่างระบบ มีโครงสร้างที่เข้าใจง่ายทั้งสำหรับมนุษย์และเครื่องคอมพิวเตอร์ ซึ่งมักถูกใช้อย่างแพร่หลายในเว็บแอปพลิเคชันและบริการ API ต่าง ๆ&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;รูปแบบของ JSON&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;&lt;em&gt;วัตถุ (Object)&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                วัตถุใน JSON ประกอบด้วยคู่ชื่อ-ค่า (name-value pairs) โดยใช้เครื่องหมาย {} และเครื่องหมายจุลภาค , เพื่อคั่นคู่ชื่อ-ค่าแต่ละคู่:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Wonderland"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;&lt;em&gt;อาร์เรย์ (Array)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;อาร์เรย์ใน JSON ประกอบด้วยรายการของค่าโดยใช้เครื่องหมาย [] และเครื่องหมายจุลภาค , เพื่อคั่นค่าต่าง ๆ:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"Apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"Banana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"Cherry"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;&lt;em&gt;ประเภทของค่าใน JSON&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;สตริง (String): ข้อความที่อยู่ในเครื่องหมายอัญประกาศคู่ ""
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;ตัวเลข (Number): ค่าตัวเลข
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;วัตถุ (Object): ชุดของคู่ชื่อ-ค่า
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;อาร์เรย์ (Array): รายการของค่า
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"item1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"item2"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;บูลีน (Boolean): ค่าความจริง true หรือ false
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;ค่าว่าง (Null): ค่าว่าง null
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;&lt;em&gt;ตัวอย่างที่ซับซ้อนขึ้น&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                แสดง Array ของ user Object  ซึ่งObject user ประกอบด้วยชื่อ(name)และเมือง(city)เป็น String และอายุ(age) เป็น Number&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Wonderland"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bob"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Builderland"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"isActive"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"totalUsers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;มาเริ่มจัดการข้อมูล JSON กัน&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;&lt;em&gt;สรา้งตารางที่มี column เป็น JSON&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                เริ่มต้นสร้างตารางขึ้นมาก่อน&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;JSONB&lt;/span&gt;
                &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;สร้างตาราง users ที่มีคอลัมน์ data เป็น JSONB&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;&lt;em&gt;การแทรกข้อมูล JSON&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                การแทรกข้อมูล JSON ก็ง่ายไม่แพ้กัน ลองดูตัวอย่างนี้:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{"name": "Alice", "age": 30, "city": "Wonderland"}'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;ง่ายเหมือนการใส่ข้อมูลลงในฐานข้อมูลแบบธรรมดา!&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;&lt;em&gt;การค้นหาข้อมูล JSON&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                การค้นหาข้อมูล JSON ใน PostgreSQL นั้นเหมือนการค้นหาในโลกแห่งมายา คุณสามารถใช้คำสั่งนี้:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;Copy&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
                &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'city'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Wonderland'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;คำสั่งนี้จะค้นหาผู้ใช้ที่อาศัยอยู่ในเมือง Wonderland และแสดงชื่อของพวกเขา&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;&lt;em&gt;การอัปเดตข้อมูล JSON&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                การอัปเดตข้อมูล JSON ก็ทำได้ง่ายและรวดเร็ว ลองดูตัวอย่างนี้:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonb_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'{age}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'31'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Alice'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;เพียงเท่านี้ อายุของ Alice ก็จะถูกอัปเดตเป็น 31 ปี!&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;&lt;em&gt;การลบข้อมูล JSON&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
                การลบข้อมูล JSON ทำได้โดยการระบุคีย์ที่ต้องการลบ:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;Copy&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
                &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'city'&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Alice'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;คำสั่งนี้จะลบข้อมูลเมืองของ Alice ออกไป&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;ฟังก์ชั่น และตัวดำเนินการเกี่ยวกับข้อมูล JSON&lt;/strong&gt;&lt;br&gt;
                จากการหัวข้อที่ผ่านมาจะพบว่า syntax หลายส่วนจะไม่ตรงตามรูปแบบภาษา SQL นักเนื่องจากประเภทข้อมูล JSON ไม่ใช่ชนิดข้อมูลมาตรฐานของ SQL แต่ Postgres ก็มีเครื่องมือที่ทรงพลังในการจัดการข้อมูลอยู่&lt;br&gt;
                ***ตัวดำเนินการในการดึงข้อมูล&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;-&amp;gt; (Extract JSON Object Field): ดึงค่า JSON object field โดยไม่แปลงเป็นประเภทอื่น&lt;/li&gt;
                &lt;li&gt;-&amp;gt;&amp;gt; (Extract JSON Object Field as Text): ดึงค่า JSON object field และแปลงเป็นข้อความ&lt;/li&gt;
                &lt;li&gt;#&amp;gt; (Extract JSON Sub-Object): ดึงค่า JSON sub-object&lt;/li&gt;
                &lt;li&gt;#&amp;gt;&amp;gt; (Extract JSON Sub-Object as Text): ดึงค่า JSON sub-object และแปลงเป็นข้อความ
                &lt;strong&gt;&lt;em&gt;ฟังก์ชันสำหรับการอัปเดตข้อมูล JSON&lt;/em&gt;&lt;/strong&gt;
                &lt;/li&gt;
                &lt;li&gt;jsonb_set: อัปเดตค่าใน JSONB&lt;/li&gt;
                &lt;li&gt;jsonb_insert: แทรกค่าใหม่ใน JSONB&lt;/li&gt;
                &lt;li&gt;jsonb_delete: ลบคีย์ออกจาก JSONB
                &lt;strong&gt;&lt;em&gt;ฟังก์ชันสำหรับการสร้างและการตรวจสอบ JSON&lt;/em&gt;&lt;/strong&gt;
                &lt;/li&gt;
                &lt;li&gt;json_build_object: สร้าง JSON object จากคู่คีย์-ค่า&lt;/li&gt;
                &lt;li&gt;jsonb_pretty: จัดรูปแบบ JSONB ให้สวยงาม&lt;/li&gt;
                &lt;li&gt;jsonb_typeof: ตรวจสอบประเภทของค่าใน JSONB&lt;/li&gt;
                &lt;/ol&gt;

                &lt;blockquote&gt;
                &lt;p&gt;&lt;strong&gt;&lt;u&gt;หมายเหตุ&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
                สามารถดูรายละเอียดเพิ่มเติม&lt;br&gt;
                &lt;a href="https://www.postgresql.org/docs/current/functions-json.html" rel="noopener noreferrer"&gt;https://www.postgresql.org/docs/current/functions-json.html&lt;/a&gt;&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;&lt;strong&gt;ข้อควรรู้&lt;/strong&gt;&lt;/p&gt;

                &lt;blockquote&gt;
                &lt;p&gt;&lt;strong&gt;- JSON กับ JSONB ไม่เหมือนกันนะ&lt;/strong&gt; JSON กับจะเก็บข้อมูลในรูปแบบ text ในขณะที่ JSONB จะเก็บในรูปแบบ binary ทำให้รองรับการบีบอัดเพื่อประหยัดพื้นที่ และการเข้าข้อมูลแบบสุ่มทำให้เร็วกว่าจึงเหมาะสำหรับการเก็บข้อมูล JSON ที่ต้องการดัดแปลงบ่อย&lt;br&gt;
                &lt;strong&gt;- การทำ Index ในข้อมูลชนิด JSON&lt;/strong&gt; แนะนำดัชนีเป็นประเภท B-Tree ซึ่งทำงานได้ดีกว่า&lt;br&gt;
                &lt;strong&gt;- ขนาดข้อมูลสูงสุดที่รับได้&lt;/strong&gt; ใน postgres กำหนดค่าเริ่มต้นขนาดเพจไว้ 8KB และกำหนดประเภทข้อมูล  JSON ไว้ 1 เพจดังนั้นขนาดข้อมูลจึงไม่ควรเกิน 8 KB&lt;/p&gt;
                &lt;/blockquote&gt;

                &lt;p&gt;&lt;strong&gt;ส่งท้าย&lt;/strong&gt;&lt;br&gt;
                หวังว่าบนความนี้จะทำให้เข้าใจข้อมูลประเภท JSON และสนุกกับการจัดการข้อมูลประเภทนี้ผ่าน postgres มากขึ้นเพื่อนำมาใช้ในproject ต่างๆได้ครับแล้วพบกันใหม่ครับ&lt;/p&gt;

            </description>
        </item>
        <item>
            <title>THE ROLE OF SEMANTIC HTML IN ENHANCING SEO AND WEB ACCESSIBILITY</title>
            <dc:creator>Kevin Kimtai</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:19:06 +0000</pubDate>
            <link>https://dev.to/kevin_kimtai/the-role-of-semantic-html-in-enhancing-seo-and-web-accessibility-g99</link>
            <guid>https://dev.to/kevin_kimtai/the-role-of-semantic-html-in-enhancing-seo-and-web-accessibility-g99</guid>
            <description>&lt;p&gt;The Role of Semantic HTML in Enhancing SEO and Web Accessibility&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;&lt;p&gt;Introduction to Semantic HTML&lt;br&gt;
                Semantic HTML involves using HTML tags that provide meaning and context to the web content they enclose. This approach not only improves the visual presentation but also enhances the understanding and accessibility of the content for search engines and users, particularly those using assistive technologies.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;SEO Benefits of Semantic HTML&lt;br&gt;
                How Semantic HTML Tags Help Search Engines Index and Rank Web Pages&lt;/p&gt;&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;Semantic HTML tags give search engines clear indicators of the structure and importance of web content. Tags like &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; define the various sections of a webpage, making it easier for search engines to parse and understand the content.&lt;/p&gt;

                &lt;p&gt;Improving the Relevance and Quality of Search Results&lt;/p&gt;

                &lt;p&gt;By using semantic HTML, web developers can provide search engines with more accurate information about the content and its significance. This improves the relevance and quality of search results, as search engines can better match the content to user queries.&lt;/p&gt;

                &lt;p&gt;Example:&lt;br&gt;&lt;br&gt;
                Adding semantic tags to a blog post helps search engines identify the title, author, publication date, and main sections of the article, leading to more relevant search results.&lt;/p&gt;

                &lt;p&gt;Positive Impact on SEO Performance&lt;/p&gt;

                &lt;p&gt;Proper use of semantic HTML can significantly boost a website’s SEO performance. Enhanced content understanding leads to better indexing, higher rankings, and improved visibility in search engine results pages (SERPs).&lt;/p&gt;

                &lt;p&gt;Example:&lt;br&gt;
                A website using semantic HTML for its articles, sections, and headers can achieve higher rankings compared to one using non-semantic tags, due to the improved clarity and structure provided to search engines.&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Accessibility Improvements with Semantic HTML
                Aiding Screen Readers and Assistive Technologies&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;Semantic HTML aids screen readers and other assistive technologies by providing clear and meaningful structure to web content. Tags like &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; help these technologies navigate and interpret the content more effectively.&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;Example:
                Html

                &lt;ul&gt;
                &lt;li&gt;Home&lt;/li&gt;
                &lt;li&gt;About&lt;/li&gt;
                &lt;li&gt;Contact&lt;/li&gt;
                &lt;/ul&gt;

                &lt;/li&gt;
                &lt;/ul&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;
                Creating an Inclusive Web Experience

                Semantic HTML is crucial for creating an inclusive web experience for all users, including those with disabilities. It ensures that content is accessible and usable by everyone, regardless of their physical or cognitive abilities.

                - Example:
                Using the `&amp;lt;main&amp;gt;` tag to denote the main content area helps screen readers skip repetitive content and navigate directly to the primary information.

                Enhancing Usability for People with Disabilities

                Proper use of semantic HTML enhances the usability of web pages for people with disabilities. It provides a structured and logical flow of content, making it easier for users to understand and interact with the webpage.

                -Example:

                &amp;lt;html&amp;gt;
                &amp;lt;article&amp;gt;
                &amp;lt;header&amp;gt;
                &amp;lt;h2&amp;gt;Inclusive Design&amp;lt;/h2&amp;gt;
                &amp;lt;p&amp;gt;Author: Jane Doe&amp;lt;/p&amp;gt;
                &amp;lt;/header&amp;gt;
                &amp;lt;section&amp;gt;
                &amp;lt;h3&amp;gt;Accessibility Features&amp;lt;/h3&amp;gt;
                &amp;lt;p&amp;gt;Our website includes several accessibility features, such as keyboard navigation and screen reader support...&amp;lt;/p&amp;gt;
                &amp;lt;/section&amp;gt;
                &amp;lt;footer&amp;gt;
                &amp;lt;p&amp;gt;Published on July 5, 2024&amp;lt;/p&amp;gt;
                &amp;lt;/footer&amp;gt;
                &amp;lt;/article&amp;gt;
                &amp;lt;/Html&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;


                &lt;ol&gt;
                &lt;li&gt;Conclusion&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;Semantic HTML plays a vital role in enhancing both SEO and web accessibility. By using semantic tags, web developers can improve the indexing, ranking, and relevance of their content for search engines, while also making their websites more accessible and usable for all users, including those with disabilities. This approach not only boosts the website’s performance in search results but also contributes to a more inclusive and user-friendly web experience.&lt;/p&gt;



                &lt;p&gt;Full Semantic HTML Example&lt;br&gt;
                ………………………………….&lt;br&gt;
                &amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;
                &lt;br&gt;
                &lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                Semantic HTML Example&lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;h1&gt;My Awesome Website&lt;/h1&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;ul&gt;

                &lt;li&gt;Home&lt;/li&gt;

                &lt;li&gt;About&lt;/li&gt;

                &lt;li&gt;Services&lt;/li&gt;

                &lt;li&gt;Contact&lt;/li&gt;

                &lt;/ul&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;h2&gt;Welcome to My Website&lt;/h2&gt;
                &lt;br&gt;
                &lt;p&gt;Published on: &lt;time&gt;July 5, 2024&lt;/time&gt;&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;h3&gt;Introduction&lt;/h3&gt;
                &lt;br&gt;
                &lt;p&gt;This website is an example of using semantic HTML to enhance SEO and accessibility. It includes various sections and articles that demonstrate the proper use of HTML5 tags.&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;h3&gt;Content Section&lt;/h3&gt;
                &lt;br&gt;
                &lt;p&gt;Here we provide some detailed information about the topic at hand. Semantic HTML helps search engines and assistive technologies understand the content better.&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;p&gt;Author: Jane Doe&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;

                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!-- Additional Article --&amp;gt;
                &amp;lt;article&amp;gt;
                &amp;lt;header&amp;gt;
                &amp;lt;h2&amp;gt;Another Interesting Topic&amp;lt;/h2&amp;gt;
                &amp;lt;p&amp;gt;Published on: &amp;lt;time datetime="2024-06-30"&amp;gt;June 30, 2024&amp;lt;/time&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;/header&amp;gt;
                &amp;lt;section&amp;gt;
                &amp;lt;h3&amp;gt;Overview&amp;lt;/h3&amp;gt;
                &amp;lt;p&amp;gt;This section provides an overview of another interesting topic relevant to our website's theme.&amp;lt;/p&amp;gt;
                &amp;lt;/section&amp;gt;
                &amp;lt;footer&amp;gt;
                &amp;lt;p&amp;gt;Author: John Smith&amp;lt;/p&amp;gt;
                &amp;lt;/footer&amp;gt;
                &amp;lt;/article&amp;gt;
                &amp;lt;/main&amp;gt;
                &amp;lt;aside&amp;gt;
                &amp;lt;h2&amp;gt;Related Links&amp;lt;/h2&amp;gt;
                &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#link1"&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#link2"&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href="#link3"&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
                &amp;lt;/aside&amp;gt;
                &amp;lt;footer&amp;gt;
                &amp;lt;p&amp;gt;&amp;amp;copy; 2024 My Awesome Website. All rights reserved.&amp;lt;/p&amp;gt;
                &amp;lt;/footer&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;


            </description>
            <category>webdev</category>
            <category>html</category>
        </item>
        <item>
            <title>transpose(), t(), adjoint(), mH and mT in PyTorch</title>
            <dc:creator>Super Kai (Kazuya Ito)</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:14:46 +0000</pubDate>
            <link>https://dev.to/hyperkai/transpose-t-adjoint-mh-and-mt-in-pytorch-p62</link>
            <guid>https://dev.to/hyperkai/transpose-t-adjoint-mh-and-mt-in-pytorch-p62</guid>
            <description>&lt;p&gt;*&lt;a href="https://dev.to/hyperkai/permute-and-movedim-in-pytorch-3db3/edit"&gt;My post&lt;/a&gt; explains &lt;a href="https://pytorch.org/docs/stable/generated/torch.permute.html" rel="noopener noreferrer"&gt;permute()&lt;/a&gt; and &lt;a href="https://pytorch.org/docs/stable/generated/torch.movedim.html" rel="noopener noreferrer"&gt;movedim()&lt;/a&gt;.&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://pytorch.org/docs/stable/generated/torch.transpose.html" rel="noopener noreferrer"&gt;transpose()&lt;/a&gt; can get the 0D or more D transposed tensor of zero or more elements without losing data from the 0D or more D tensor of zero or more elements as shown below:&lt;/p&gt;

                &lt;p&gt;*Memos:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;transpose()&lt;/code&gt; can be used with &lt;a href="https://pytorch.org/docs/stable/torch.html" rel="noopener noreferrer"&gt;torch&lt;/a&gt; or a tensor.&lt;/li&gt;
                &lt;li&gt;The 1st argument with &lt;code&gt;torch&lt;/code&gt; or using a tensor is &lt;code&gt;input&lt;/code&gt;(Required-Type:&lt;code&gt;tensor&lt;/code&gt; of &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt;).&lt;/li&gt;
                &lt;li&gt;The 2nd argument with &lt;code&gt;torch&lt;/code&gt; or the 1st argument with a tensor is &lt;code&gt;dim0&lt;/code&gt;(Required-Type:&lt;code&gt;int&lt;/code&gt;).&lt;/li&gt;
                &lt;li&gt;The 3rd argument with &lt;code&gt;torch&lt;/code&gt; or the 2nd argument with a tensor is &lt;code&gt;dim1&lt;/code&gt;(Required-Type:&lt;code&gt;int&lt;/code&gt;).&lt;/li&gt;
                &lt;li&gt;
                &lt;a href="https://pytorch.org/docs/stable/generated/torch.swapaxes.html" rel="noopener noreferrer"&gt;swapaxes()&lt;/a&gt; and &lt;a href="https://pytorch.org/docs/stable/generated/torch.swapdims.html" rel="noopener noreferrer"&gt;swapdims()&lt;/a&gt; are the aliases of &lt;code&gt;transpose()&lt;/code&gt;.
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;

                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[[0, 1, 2], [3, 4, 5]],
                #         [[6, 7, 8], [9, 10, 11]],
                #         [[12, 13, 14], [15, 16, 17]],
                #         [[18, 19, 20], [21, 22, 23]]])
                &lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[[0, 1, 2], [6, 7, 8], [12, 13, 14], [18, 19, 20]],
                #         [[3, 4, 5], [ 9, 10, 11], [15, 16, 17], [21, 22, 23]]])
                &lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[[0, 6, 12, 18], [3, 9, 15, 21]],
                #         [[1, 7, 13, 19], [4, 10, 16, 22]],
                #         [[2, 8, 14, 20], [5, 11, 17, 23]]])
                &lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim0&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dim1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[[0, 3], [1, 4], [2, 5]],
                #         [[6, 9], [7, 10], [8, 11]],
                #         [[12, 15], [13, 16], [14, 17]],
                #         [[18, 21], [19, 22], [20, 23]]])
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://pytorch.org/docs/stable/generated/torch.t.html" rel="noopener noreferrer"&gt;t()&lt;/a&gt; can get the 0D, 1D or 2D transposed tensor of zero or more elements without losing data from the 0D, 1D or 2D tensor of zero or more elements as shown below:&lt;/p&gt;

                &lt;p&gt;*Memos:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;t()&lt;/code&gt; can be used with &lt;code&gt;torch&lt;/code&gt; or a tensor.&lt;/li&gt;
                &lt;li&gt;The 1st argument with &lt;code&gt;torch&lt;/code&gt; or using a tensor is &lt;code&gt;input&lt;/code&gt;(Required-Type:&lt;code&gt;tensor&lt;/code&gt; of &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt;).&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;t()&lt;/code&gt; is equivalent to &lt;code&gt;transpose(input=my_tensor, dim0=0, dim1=1)&lt;/code&gt;.
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;

                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor(0)
                &lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([0, 1, 2])
                &lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[0, 3, 6, 9],
                #         [1, 4, 7, 10],
                #         [2, 5, 8, 11]])
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://pytorch.org/docs/stable/generated/torch.adjoint.html" rel="noopener noreferrer"&gt;adjoint()&lt;/a&gt; or &lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mH" rel="noopener noreferrer"&gt;mH&lt;/a&gt; can get the view of the 2D or more D transposed and conjugated tensor of zero or more elements without losing data from the 2D or more D tensor of zero or more elements as shown below:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;adjoint()&lt;/code&gt; can be used with &lt;code&gt;torch&lt;/code&gt; or a tensor while &lt;code&gt;mH&lt;/code&gt; can be used with a tensor but not with &lt;code&gt;torch&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;For &lt;code&gt;adjoint()&lt;/code&gt;, the 1st argument with &lt;code&gt;torch&lt;/code&gt; or using a tensor is &lt;code&gt;input&lt;/code&gt;(Required-Type:&lt;code&gt;tensor&lt;/code&gt; of &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt;).&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;adjoint()&lt;/code&gt; is equivalent to &lt;code&gt;mH&lt;/code&gt;, equivalent to &lt;code&gt;transpose(-2, -1)&lt;/code&gt; for an &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt; tensor and equivalent to &lt;code&gt;transpose(-2, -1).conj()&lt;/code&gt; for a &lt;code&gt;complex&lt;/code&gt; tensor.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;adjoint()&lt;/code&gt; or &lt;code&gt;mH&lt;/code&gt; can also get the 0D tensor of zero or more elements but it's deprecated.
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;

                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adjoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adjoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mH&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[0, 3, 6, 9],
                #         [1, 4, 7, 10],
                #         [2, 5, 8, 11]])
                &lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;
                &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adjoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mH&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[[0, 3], [1, 4], [2, 5]],
                #         [[6, 9], [7, 10], [8, 11]],
                #         [[12, 15], [13, 16], [14, 17]],
                #         [[18, 21], [19, 22], [20, 23]]])
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.mT" rel="noopener noreferrer"&gt;mT&lt;/a&gt; can get the view of the 2D or more D transposed tensor of zero or more elements without losing data from the 2D or more D tensor of zero or more elements as shown below:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;
                &lt;code&gt;mT&lt;/code&gt; can be used with a tensor but not with &lt;code&gt;torch&lt;/code&gt;.&lt;/li&gt;
                &lt;li&gt;
                &lt;code&gt;mT&lt;/code&gt; can also get the 0D tensor of zero or more elements but it's deprecated.
                &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;

                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mT&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[0, 3, 6, 9],
                #         [1, 4, 7, 10],
                #         [2, 5, 8, 11]])
                &lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tensor&lt;/span&gt;&lt;span class="p"&gt;([[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;
                &lt;span class="n"&gt;my_tensor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mT&lt;/span&gt;
                &lt;span class="c1"&gt;# tensor([[[0, 3], [1, 4], [2, 5]],
                #         [[6, 9], [7, 10], [8, 11]],
                #         [[12, 15], [13, 16], [14, 17]],
                #         [[18, 21], [19, 22], [20, 23]]])
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



            </description>
            <category>pytorch</category>
            <category>transpose</category>
            <category>t</category>
            <category>adjoint</category>
        </item>
        <item>
            <title>Remixed Relay: Evolution of React Server Component</title>
            <dc:creator>Guhaprasaanth Nandagopal</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:14:02 +0000</pubDate>
            <link>https://dev.to/guhandelta/evolution-of-react-server-componen-m8f</link>
            <guid>https://dev.to/guhandelta/evolution-of-react-server-componen-m8f</guid>
            <description>&lt;p&gt;React Server Components (RSC) represents a significant advancement in how server-rendered content is handled in React applications. The concept of React Server Components draws inspiration from various previous technologies and patterns, particularly Relay. Relay, a JavaScript framework for building data-driven React applications, provided foundational concepts that have influenced the development of React Server Components. This article delves into how React Server Components evolved from Relay, highlighting the similarities, differences, and advancements.&lt;/p&gt;

                &lt;p&gt;Understanding Relay&lt;br&gt;
                What is Relay?&lt;br&gt;
                Relay is a JavaScript framework developed by Facebook (now Meta) for managing and fetching GraphQL data in React applications. It was designed to handle complex data requirements and provide a highly optimized data-fetching layer for React.&lt;/p&gt;

                &lt;p&gt;Key Features of Relay&lt;br&gt;
                GraphQL Integration: Relay works seamlessly with GraphQL, allowing for precise data fetching and efficient updates.&lt;br&gt;
                Declarative Data Fetching: Components declare their data dependencies using GraphQL fragments, making data requirements explicit and co-located with the components.&lt;br&gt;
                Optimistic Updates: Relay supports optimistic UI updates, allowing the UI to reflect changes before the server confirms them.&lt;br&gt;
                Efficient Data Fetching: Relay minimizes over-fetching and under-fetching by composing multiple data requirements into a single query.&lt;/p&gt;

                &lt;p&gt;The Concept of Server Components&lt;br&gt;
                What are React Server Components?&lt;br&gt;
                React Server Components (RSC) allow developers to build components that run on the server and send HTML to the client. This approach aims to optimize server-side rendering (SSR) by splitting the rendering workload between the server and the client.&lt;/p&gt;

                &lt;p&gt;Key Features of React Server Components&lt;br&gt;
                Server-Side Execution: Components can be executed on the server, reducing the client-side JavaScript bundle size.&lt;br&gt;
                Direct Data Access: Server Components can directly access server-side data sources, such as databases or APIs, without additional client-side data fetching.&lt;/p&gt;

                &lt;p&gt;Seamless Integration: RSC can be seamlessly integrated with client components, enabling a hybrid rendering model.&lt;br&gt;
                Improved Performance: By offloading rendering to the server, React Server Components can improve the initial load performance and SEO.&lt;br&gt;
                Evolution from Relay to React Server Components&lt;/p&gt;

                &lt;p&gt;Similarities:&lt;/p&gt;

                &lt;p&gt;Declarative Data Requirements: Both Relay and React Server Components emphasize the declarative nature of data requirements. In Relay, components declare their GraphQL fragments, while in RSC, server components can directly fetch data and render HTML.&lt;/p&gt;

                &lt;p&gt;Optimized Data Fetching: Relay’s efficient data fetching mechanism influenced RSC’s ability to directly access and fetch data on the server, reducing the need for multiple client-side requests.&lt;br&gt;
                Component Co-location: In both Relay and RSC, data fetching logic is co-located with the components, making the data dependencies explicit and easier to manage.&lt;/p&gt;

                &lt;p&gt;Differences:&lt;br&gt;
                Rendering Paradigm: Relay focuses on optimizing client-side data fetching and updates using GraphQL, while React Server Components shift part of the rendering workload to the server, sending pre-rendered HTML to the client.&lt;/p&gt;

                &lt;p&gt;Server-Side Execution: Relay operates entirely on the client side, fetching data and updating the UI. RSC executes components on the server, leveraging server resources to generate HTML and send it to the client.&lt;/p&gt;

                &lt;p&gt;Data Fetching: Relay relies on GraphQL for data fetching, requiring a GraphQL server and schema. RSC can fetch data from any server-side data source, including REST APIs, databases, or other services, without being tied to GraphQL.&lt;/p&gt;

                &lt;p&gt;Advancements in React Server Components&lt;br&gt;
                Simplified Data Access: RSC simplifies data access by allowing server-side code to fetch data directly, avoiding the need for additional client-side data-fetching logic.&lt;/p&gt;

                &lt;p&gt;Reduced Client-Side Overhead: By moving part of the rendering logic to the server, RSC reduces the amount of JavaScript that needs to be executed on the client, leading to improved performance and faster initial loads.&lt;/p&gt;

                &lt;p&gt;Hybrid Rendering: RSC supports a hybrid rendering model where server components can be combined with client components, providing flexibility in rendering strategies.&lt;/p&gt;

                &lt;p&gt;Improved SEO: Server-side rendering with RSC improves SEO by delivering pre-rendered HTML content to search engines, making it easier for them to crawl and index the content.&lt;/p&gt;

                &lt;p&gt;Example: Transition from Relay to React Server Components&lt;br&gt;
                Relay Example&lt;br&gt;
                import { graphql, QueryRenderer } from 'react-relay';&lt;br&gt;
                import environment from './environment';&lt;/p&gt;

                &lt;p&gt;const App = () =&amp;gt; (&lt;br&gt;

                environment={environment}&lt;br&gt;
                query={graphql`&lt;br&gt;
                query AppQuery {&lt;br&gt;
                user(id: "1") {&lt;br&gt;
                name&lt;br&gt;
                }&lt;br&gt;
                }&lt;br&gt;
                `}&lt;br&gt;
                render={({ error, props }) =&amp;gt; {&lt;br&gt;
                if (error) {&lt;br&gt;
                return Error!;&lt;br&gt;
                }&lt;br&gt;
                if (!props) {&lt;br&gt;
                return Loading...;&lt;br&gt;
                }&lt;br&gt;
                return User: {props.user.name};&lt;br&gt;
                }}&lt;br&gt;
                /&amp;gt;&lt;br&gt;
                );&lt;/p&gt;

                &lt;p&gt;export default App;&lt;/p&gt;

                &lt;p&gt;How Relay’s Innovations Were Brought to React Through React Server Components&lt;/p&gt;

                &lt;p&gt;Relay introduced several groundbreaking features and methodologies for data handling and fetching in React applications. These features provided developers with a robust framework for managing complex data dependencies and optimizing client-side rendering. &lt;/p&gt;

                &lt;p&gt;React Server Components (RSC) have taken some of these innovations and integrated them into a server-rendered paradigm, enhancing the capabilities of React applications. This section emphasizes how the core functionalities of Relay have been adapted and evolved into React Server Components.&lt;/p&gt;

                &lt;p&gt;1) Declarative Data Fetching: From Relay to React Server Components&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: In Relay, data fetching is declarative. Each component specifies its data requirements using GraphQL fragments, which are then composed into a single query by Relay. This approach ensures that data dependencies are clear and co-located with the component that uses them.&lt;/p&gt;

                &lt;p&gt;import { graphql, QueryRenderer } from 'react-relay';&lt;/p&gt;

                &lt;p&gt;const UserComponent = () =&amp;gt; (&lt;br&gt;

                environment={environment}&lt;br&gt;
                query={graphql`&lt;br&gt;
                query UserComponentQuery {&lt;br&gt;
                user(id: "1") {&lt;br&gt;
                name&lt;br&gt;
                email&lt;br&gt;
                }&lt;br&gt;
                }&lt;br&gt;
                `}&lt;br&gt;
                render={({ error, props }) =&amp;gt; {&lt;br&gt;
                if (error) {&lt;br&gt;
                return Error!;&lt;br&gt;
                }&lt;br&gt;
                if (!props) {&lt;br&gt;
                return Loading...;&lt;br&gt;
                }&lt;br&gt;
                return (&lt;br&gt;
                &lt;br&gt;
                &lt;/p&gt;
                &lt;h1&gt;{props.user.name}&lt;/h1&gt;
                &lt;br&gt;
                &lt;p&gt;{props.user.email}&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                );&lt;br&gt;
                }}&lt;br&gt;
                /&amp;gt;&lt;br&gt;
                );

                &lt;p&gt;export default UserComponent;&lt;/p&gt;

                &lt;p&gt;How was it solidified in RSC: React Server Components also use a declarative approach to data fetching, but with a key difference: data fetching occurs on the server. This allows for direct and efficient access to server-side resources without additional client-side requests.&lt;/p&gt;

                &lt;p&gt;// UserComponent.server.js&lt;br&gt;
                import React from 'react';&lt;/p&gt;

                &lt;p&gt;const fetchUserData = async (id) =&amp;gt; {&lt;br&gt;
                const response = await fetch(&lt;code&gt;https://api.example.com/users/${id}&lt;/code&gt;);&lt;br&gt;
                return response.json();&lt;br&gt;
                };&lt;/p&gt;

                &lt;p&gt;const UserComponent = async ({ id }) =&amp;gt; {&lt;br&gt;
                const user = await fetchUserData(id);&lt;br&gt;
                return (&lt;br&gt;
                &lt;/p&gt;
                &lt;br&gt;
                &lt;h1&gt;{user.name}&lt;/h1&gt;
                &lt;br&gt;
                &lt;p&gt;{user.email}&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                );&lt;br&gt;
                };

                &lt;p&gt;export default UserComponent;&lt;/p&gt;

                &lt;p&gt;2) Optimized Data Fetching and Minimization&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: Relay optimizes data fetching by composing multiple component queries into a single network request. This minimizes the number of requests and ensures that only the required data is fetched.&lt;/p&gt;

                &lt;p&gt;import { commitMutation, graphql } from 'react-relay';&lt;/p&gt;

                &lt;p&gt;function updateUser(environment, userId, newName) {&lt;br&gt;
                const mutation = graphql&lt;code&gt;&lt;br&gt;
                mutation UpdateUserMutation($input: UpdateUserInput!) {&lt;br&gt;
                updateUser(input: $input) {&lt;br&gt;
                user {&lt;br&gt;
                id&lt;br&gt;
                name&lt;br&gt;
                }&lt;br&gt;
                }&lt;br&gt;
                }&lt;br&gt;
                &lt;/code&gt;;&lt;/p&gt;

                &lt;p&gt;const variables = {&lt;br&gt;
                input: {&lt;br&gt;
                id: userId,&lt;br&gt;
                name: newName,&lt;br&gt;
                },&lt;br&gt;
                };&lt;/p&gt;

                &lt;p&gt;commitMutation(environment, {&lt;br&gt;
                mutation,&lt;br&gt;
                variables,&lt;br&gt;
                optimisticResponse: {&lt;br&gt;
                updateUser: {&lt;br&gt;
                user: {&lt;br&gt;
                id: userId,&lt;br&gt;
                name: newName,&lt;br&gt;
                },&lt;br&gt;
                },&lt;br&gt;
                },&lt;br&gt;
                onCompleted: (response, errors) =&amp;gt; {&lt;br&gt;
                console.log('Mutation completed');&lt;br&gt;
                },&lt;br&gt;
                onError: (err) =&amp;gt; console.error(err),&lt;br&gt;
                });&lt;br&gt;
                }&lt;/p&gt;

                &lt;p&gt;How was it solidified inRSC: React Server Components leverage the server’s ability to directly fetch and render data, eliminating the need for multiple client-side data fetching operations. This approach inherently minimizes network requests and optimizes the data fetching process.&lt;/p&gt;

                &lt;p&gt;3) Component Co-location and Data Dependency Management&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: Data requirements are co-located with the components that use them, making it easier to manage and understand data dependencies.&lt;/p&gt;

                &lt;p&gt;const UserFragment = graphql&lt;code&gt;&lt;br&gt;
                fragment UserComponent_user on User {&lt;br&gt;
                name&lt;br&gt;
                email&lt;br&gt;
                }&lt;br&gt;
                &lt;/code&gt;;&lt;/p&gt;

                &lt;p&gt;const UserComponent = ({ user }) =&amp;gt; (&lt;br&gt;
                &lt;/p&gt;
                &lt;br&gt;
                &lt;h1&gt;{user.name}&lt;/h1&gt;
                &lt;br&gt;
                &lt;p&gt;{user.email}&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                );

                &lt;p&gt;export default createFragmentContainer(UserComponent, {&lt;br&gt;
                user: UserFragment,&lt;br&gt;
                });&lt;br&gt;
                How was it solidified in RSC: In React Server Components, data fetching and rendering logic are similarly co-located. This maintains clarity and modularity, allowing developers to understand and manage data dependencies within the component itself.&lt;/p&gt;

                &lt;p&gt;// UserComponent.server.js&lt;br&gt;
                const fetchUserData = async (id) =&amp;gt; {&lt;br&gt;
                const response = await fetch(&lt;code&gt;https://api.example.com/users/${id}&lt;/code&gt;);&lt;br&gt;
                return response.json();&lt;br&gt;
                };&lt;/p&gt;

                &lt;p&gt;const UserComponent = async ({ id }) =&amp;gt; {&lt;br&gt;
                const user = await fetchUserData(id);&lt;br&gt;
                return (&lt;br&gt;
                &lt;/p&gt;
                &lt;br&gt;
                &lt;h1&gt;{user.name}&lt;/h1&gt;
                &lt;br&gt;
                &lt;p&gt;{user.email}&lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                );&lt;br&gt;
                };

                &lt;p&gt;export default UserComponent;&lt;/p&gt;

                &lt;p&gt;4) Improved Performance and SEO:&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: Relay improves client-side performance by reducing over-fetching and providing mechanisms for efficient updates. However, because it operates on the client side, initial loading times and SEO can still be challenging.&lt;/p&gt;

                &lt;p&gt;How was it solidified in RSC: React Server Components significantly enhance performance and SEO by rendering components on the server. The server can send fully-rendered HTML to the client, reducing the amount of JavaScript needed on the client side and providing immediate content for search engines to crawl.&lt;/p&gt;

                &lt;p&gt;// Server-side rendering logic&lt;br&gt;
                import { renderToString } from 'react-dom/server';&lt;br&gt;
                import App from './App';&lt;/p&gt;

                &lt;p&gt;const serverRender = (req, res) =&amp;gt; {&lt;br&gt;
                const html = renderToString();&lt;br&gt;
                res.send(&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;
                &amp;lt;html&amp;gt;&lt;br&gt;
                &amp;lt;head&amp;gt;&lt;br&gt;
                &amp;lt;title&amp;gt;React Server Components&amp;lt;/title&amp;gt;&lt;br&gt;
                &amp;lt;/head&amp;gt;&lt;br&gt;
                &amp;lt;body&amp;gt;&lt;br&gt;
                &amp;lt;div id="root"&amp;gt;${html}&amp;lt;/div&amp;gt;&lt;br&gt;
                &amp;lt;script src="/bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br&gt;
                &amp;lt;/body&amp;gt;&lt;br&gt;
                &amp;lt;/html&amp;gt;&lt;/code&gt;);&lt;br&gt;
                };&lt;/p&gt;

                &lt;p&gt;5) Hybrid Rendering Model&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: While Relay focuses on client-side data management and rendering, it does not inherently support server-side rendering.&lt;/p&gt;

                &lt;p&gt;How was it solidified in RSC: React Server Components introduce a hybrid rendering model, where server-rendered components can seamlessly integrate with client-rendered components. This hybrid approach allows developers to leverage the benefits of both server-side and client-side rendering within the same application.&lt;/p&gt;

                &lt;p&gt;// App.server.js&lt;br&gt;
                import React from 'react';&lt;br&gt;
                import HeaderComponent from './HeaderComponent.server';&lt;br&gt;
                import FooterComponent from './FooterComponent';&lt;br&gt;
                import UserComponent from './UserComponent.server';&lt;/p&gt;

                &lt;p&gt;const App = () =&amp;gt; (&lt;br&gt;
                &lt;/p&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                );

                &lt;p&gt;export default App;&lt;br&gt;
                6) Enhanced Developer Experience&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: Relay provides tools and conventions for managing GraphQL data, but it requires developers to understand and work with GraphQL schemas, queries, and mutations.&lt;/p&gt;

                &lt;p&gt;How was it solidified in RSC: React Server Components simplify the developer experience by allowing direct access to server-side data sources without requiring GraphQL. This reduces the learning curve and allows developers to use familiar REST APIs or other data sources.&lt;/p&gt;

                &lt;p&gt;7) Optimistic Updates:&lt;br&gt;
                Relay’s Approach&lt;br&gt;
                Relay: Relay supports optimistic updates, allowing the UI to be updated immediately based on an expected result while the actual mutation request is processed in the background. This feature improves the user experience by providing instant feedback.&lt;/p&gt;

                &lt;p&gt;import { commitMutation, graphql } from 'react-relay';&lt;/p&gt;

                &lt;p&gt;function updateUser(environment, userId, newName) {&lt;br&gt;
                const mutation = graphql&lt;code&gt;&lt;br&gt;
                mutation UpdateUserMutation($input: UpdateUserInput!) {&lt;br&gt;
                updateUser(input: $input) {&lt;br&gt;
                user {&lt;br&gt;
                id&lt;br&gt;
                name&lt;br&gt;
                }&lt;br&gt;
                }&lt;br&gt;
                }&lt;br&gt;
                &lt;/code&gt;;&lt;/p&gt;

                &lt;p&gt;const variables = {&lt;br&gt;
                input: {&lt;br&gt;
                id: userId,&lt;br&gt;
                name: newName,&lt;br&gt;
                },&lt;br&gt;
                };&lt;/p&gt;

                &lt;p&gt;commitMutation(environment, {&lt;br&gt;
                mutation,&lt;br&gt;
                variables,&lt;br&gt;
                optimisticResponse: {&lt;br&gt;
                updateUser: {&lt;br&gt;
                user: {&lt;br&gt;
                id: userId,&lt;br&gt;
                name: newName,&lt;br&gt;
                },&lt;br&gt;
                },&lt;br&gt;
                },&lt;br&gt;
                onCompleted: (response, errors) =&amp;gt; {&lt;br&gt;
                console.log('Mutation completed');&lt;br&gt;
                },&lt;br&gt;
                onError: (err) =&amp;gt; console.error(err),&lt;br&gt;
                });&lt;br&gt;
                }&lt;br&gt;
                How was it solidified in RSC: React Server Components (RSC) provide a robust framework for handling optimistic updates. By leveraging server-side rendering, RSC can pre-render components with expected data changes, ensuring immediate UI feedback while maintaining consistency and integrity.&lt;/p&gt;

                &lt;p&gt;import { use, Suspense } from 'react-server-dom';&lt;/p&gt;

                &lt;p&gt;function UserComponent({ userId, optimisticData }) {&lt;br&gt;
                const user = use(fetchUser(userId));&lt;br&gt;
                return (&lt;br&gt;
                &lt;/p&gt;
                &lt;br&gt;
                &lt;h1&gt;{optimisticData ? optimisticData.name : user.name}&lt;/h1&gt;
                &lt;br&gt;
                {optimisticData ? null : &lt;p&gt;Loading...&lt;/p&gt;}&lt;br&gt;
                &lt;br&gt;
                );&lt;br&gt;
                }

                &lt;p&gt;async function fetchUser(userId) {&lt;br&gt;
                const response = await fetch(&lt;code&gt;/api/users/${userId}&lt;/code&gt;);&lt;br&gt;
                return response.json();&lt;br&gt;
                }&lt;/p&gt;

                &lt;p&gt;async function updateUser(userId, newName) {&lt;br&gt;
                // Simulate a delay for updating user&lt;br&gt;
                await new Promise((resolve) =&amp;gt; setTimeout(resolve, 1000));&lt;br&gt;
                return { id: userId, name: newName };&lt;br&gt;
                }&lt;/p&gt;

                &lt;p&gt;// Example usage with optimistic UI&lt;br&gt;
                function App({ userId }) {&lt;br&gt;
                const optimisticData = { name: 'Optimistic Name' }; // Mock optimistic data&lt;/p&gt;

                &lt;p&gt;return (&lt;br&gt;
                Loading...&lt;/p&gt;}&amp;gt;&lt;br&gt;
                &lt;br&gt;
                &lt;br&gt;
                );&lt;br&gt;
                }

                &lt;p&gt;8) Subsequent Data Fetching&lt;br&gt;
                Relay optimizes subsequent data fetching through:&lt;/p&gt;

                &lt;p&gt;Declarative Data Requirements: Components declare their data needs, and Relay fetches the necessary data.&lt;br&gt;
                Query Batching: Relay batches multiple GraphQL queries into a single request, reducing network overhead.&lt;br&gt;
                Caching: Relay caches query results, minimizing redundant network requests.&lt;br&gt;
                Automatic Refetching: Relay refetches data when variables change, keeping the UI up-to-date.&lt;br&gt;
                // Client-Side Data Fetching with Relay&lt;br&gt;
                import { useQueryLoader, usePreloadedQuery } from 'react-relay/hooks';&lt;br&gt;
                import { MyQuery } from './MyQuery';&lt;/p&gt;

                &lt;p&gt;function MyComponent() {&lt;br&gt;
                const [queryReference, loadQuery] = useQueryLoader(MyQuery);&lt;/p&gt;

                &lt;p&gt;useEffect(() =&amp;gt; {&lt;br&gt;
                loadQuery({ id: 'some-id' });&lt;br&gt;
                }, [loadQuery]);&lt;/p&gt;

                &lt;p&gt;if (!queryReference) {&lt;br&gt;
                return &lt;/p&gt;Loading...;&lt;br&gt;
                }

                &lt;p&gt;return ;&lt;br&gt;
                }&lt;/p&gt;

                &lt;p&gt;function DisplayData({ queryReference }) {&lt;br&gt;
                const data = usePreloadedQuery(MyQuery, queryReference);&lt;br&gt;
                return &lt;/p&gt;{data.user.name};&lt;br&gt;
                }&lt;br&gt;
                How was it solidified in RSC: React Server Components (RSC) take the concept of subsequent data fetching further by performing data fetching on the server. This approach offloads the responsibility of data fetching from the client to the server, enhancing performance and reducing client-side complexity.

                &lt;p&gt;import { use } from 'react-server-dom';&lt;/p&gt;

                &lt;p&gt;function UserComponent({ userId }) {&lt;br&gt;
                const user = use(fetchUser(userId));&lt;br&gt;
                return &lt;/p&gt;{user.name};&lt;br&gt;
                }

                &lt;p&gt;async function fetchUser(userId) {&lt;br&gt;
                const response = await fetch(&lt;code&gt;/api/users/${userId}&lt;/code&gt;);&lt;br&gt;
                return response.json();&lt;br&gt;
                }&lt;/p&gt;

                &lt;p&gt;export default UserComponent;&lt;/p&gt;

                &lt;p&gt;Conclusion:&lt;br&gt;
                Relay introduced several advanced features that have profoundly influenced the development of data-driven React applications. These features, including declarative data fetching, optimized data fetching and minimization, component co-location, and data dependency management, have set a high standard for managing complex data needs in React.&lt;/p&gt;

                &lt;p&gt;React Server Components have taken these foundational concepts and adapted them to enhance server-side rendering capabilities. By leveraging server-side execution, React Server Components offer significant improvements in performance, SEO, and developer experience. The transition from Relay’s client-side optimizations to RSC’s server-side capabilities represents a natural evolution, providing developers with powerful tools to build more efficient and performant applications.&lt;/p&gt;

                &lt;p&gt;As React continues to evolve, the integration of these advanced features into the core framework through React Server Components demonstrates React’s commitment to addressing the challenges of modern web development and providing inn&lt;/p&gt;

            </description>
            <category>react</category>
            <category>reactservercomponents</category>
            <category>relay</category>
        </item>
        <item>
            <title>FIXME Please: An Exercise in TODO Linters</title>
            <dc:creator>Tyler Jang</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:13:16 +0000</pubDate>
            <link>https://dev.to/tylerjang27/fixme-please-an-exercise-in-todo-linters-f2a</link>
            <guid>https://dev.to/tylerjang27/fixme-please-an-exercise-in-todo-linters-f2a</guid>
            <description>&lt;p&gt;A few weeks ago, I was talking with a developer in our &lt;a href="https://slack.trunk.io/" rel="noopener noreferrer"&gt;Community Slack&lt;/a&gt; who was interested in adding their own TODO linter. At face value, this is a trivial problem. There are several linters that already support this to varying degrees, and many of them offer decently extensible configuration and their own plugin ecosystems. But the more I thought about it, the more the question piqued my interest. Trunk supports &lt;a href="https://docs.trunk.io/check/configuration/supported" rel="noopener noreferrer"&gt;100+ linters&lt;/a&gt; out of the box (OOTB), but which one would solve this problem best? So I set out to evaluate them all. Here are my findings...&lt;/p&gt;

                &lt;p&gt;To simplify this experiment, we should clarify what makes for a good TODO linter. Depending on your team’s culture, you may want to prevent &lt;em&gt;any&lt;/em&gt; TODOs from making it to main, or you may just want to keep tabs on them. But at a minimum, a TODO linter should satisfy the following:&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Easily and quickly report what files have “TODO” strings and where&lt;/li&gt;
                &lt;li&gt;Support multiple languages/file types&lt;/li&gt;
                &lt;li&gt;Don’t generate additional noise (“mas&lt;u&gt;todo&lt;/u&gt;n” isn’t a todo)&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;As a bonus, some TODO linters might:&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Require specific syntax for TODO comments (e.g. &lt;a href="https://clang.llvm.org/extra/clang-tidy/checks/google/readability-todo.html" rel="noopener noreferrer"&gt;clang-tidy&lt;/a&gt;)&lt;/li&gt;
                &lt;li&gt;Support other keywords and cases (e.g. FIXME)&lt;/li&gt;
                &lt;li&gt;Be able to ignore false positives as appropriate (automatically handled with &lt;a href="https://docs.trunk.io/check/configuration/ignoring-issues" rel="noopener noreferrer"&gt;trunk-ignore&lt;/a&gt;)&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;&lt;strong&gt;Now that we have our criteria, let’s dive in. All examples (both with and without Trunk) can be found in this &lt;a href="https://github.com/trunk-io/todo-linter-demo" rel="noopener noreferrer"&gt;sample repo&lt;/a&gt;, so feel free to follow along! If you haven’t used Trunk before, you can follow our setup instructions in our &lt;a href="https://docs.trunk.io/check/usage" rel="noopener noreferrer"&gt;docs&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

                &lt;h1&gt;


                The Sample File
                &lt;/h1&gt;

                &lt;p&gt;We'll lint this file with all the tools we test in this blog. This file has some real TODO comments and some fake TODOs meant to confuse linters.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Test Data&lt;/span&gt;

                A collection of different ways that TODO might show up.

                &lt;span class="sb"&gt;``yaml
                # TODO: Make this better
                version: 0.1
                ``&lt;/span&gt;

                &lt;span class="sb"&gt;``typescript
                // TODO(Tyler): Optimize this
                const a = !!!false;
                ``&lt;/span&gt;

                &lt;span class="c"&gt;&amp;lt;!-- MASTODON is not a fixme --&amp;gt;&lt;/span&gt;

                &lt;span class="gu"&gt;## Another Heading&lt;/span&gt;

                Look at all the ways to check for todo!

                &lt;span class="c"&gt;&amp;lt;!-- trunk-ignore-begin(todo-grep-wrapped,codespell,cspell,vale,semgrep,trunk-toolbox) --&amp;gt;&lt;/span&gt;

                Let's ignore this TODO though

                &lt;span class="c"&gt;&amp;lt;!-- trunk-ignore-end(todo-grep-wrapped,codespell,cspell,vale,semgrep,trunk-toolbox) --&amp;gt;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;h1&gt;


                Per-Language Rules
                &lt;/h1&gt;

                &lt;p&gt;Let’s try a naive approach. Several linters have built-in rules to check for TODOs (e.g. &lt;a href="https://docs.astral.sh/ruff/rules/line-contains-todo/" rel="noopener noreferrer"&gt;ruff&lt;/a&gt;, &lt;a href="https://eslint.org/docs/latest/rules/no-warning-comments" rel="noopener noreferrer"&gt;ESLint&lt;/a&gt;). Many others support plugin ecosystems to add your own rules. Let’s take a look at markdownlint’s approach to this, using the &lt;a href="https://www.npmjs.com/package/markdownlint-rule-search-replace" rel="noopener noreferrer"&gt;markdownlint-rule-search-replace&lt;/a&gt; package. Run &lt;code&gt;trunk check enable markdownlint&lt;/code&gt; to get started.&lt;/p&gt;

                &lt;p&gt;In order to configure the rule, we must modify &lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/.markdownlint.json" rel="noopener noreferrer"&gt;.markdownlint.json&lt;/a&gt;:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"markdownlint/style/prettier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"search-replace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"found-todo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Don't use todo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"searchPattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/TODO/gi"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Then, we can run it and inspect the output:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9yg1hg6ztuv1aigupwbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9yg1hg6ztuv1aigupwbw.png" alt="Running markdownlint with Trunk Check" width="800" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqaze5zoligzzsiu5mtcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqaze5zoligzzsiu5mtcp.png" alt="Running markdownlint standalone" width="800" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;Note that we have a &lt;code&gt;trunk-ignore&lt;/code&gt; to suppress the &lt;code&gt;TODO&lt;/code&gt; on line 24.&lt;/p&gt;

                &lt;p&gt;Markdownlint here gets the job done, but will of course only work on MD files. As soon as you start to add other file types, even YAML or JS, it doesn’t scale, and you’ll lose coverage and consistency, and chasing down the particular incantation to do this for every linter is intractable. Let’s look at some other more sustainable options.&lt;/p&gt;

                &lt;h1&gt;


                CSpell
                &lt;/h1&gt;

                &lt;p&gt;&lt;a href="https://cspell.org/" rel="noopener noreferrer"&gt;CSpell&lt;/a&gt; is a relatively extensible code spellchecker. It’s easy to use OOTB, and it runs on all file types. However, it has a high false positive rate and requires that you manually tune it by importing and defining new &lt;a href="https://cspell.org/docs/dictionaries/" rel="noopener noreferrer"&gt;dictionaries&lt;/a&gt;. Let’s see what it takes to turn it into a TODO linter. First, run &lt;code&gt;trunk check enable cspell&lt;/code&gt;. &lt;/p&gt;

                &lt;p&gt;We can define our own dictionary or simply add a list of &lt;a href="https://cspell.org/docs/forbidden-words/" rel="noopener noreferrer"&gt;forbidden words&lt;/a&gt; to &lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/cspell.yaml" rel="noopener noreferrer"&gt;cspell.yaml&lt;/a&gt;:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0.2"&lt;/span&gt;
                &lt;span class="c1"&gt;# Suggestions can sometimes take longer on CI machines,&lt;/span&gt;
                &lt;span class="c1"&gt;# leading to inconsistent results.&lt;/span&gt;
                &lt;span class="na"&gt;suggestionsTimeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5000&lt;/span&gt; &lt;span class="c1"&gt;# ms&lt;/span&gt;
                &lt;span class="na"&gt;words&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;!todo"&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;!TODO"&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feee40hdg0y9nc2k20s6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Feee40hdg0y9nc2k20s6n.png" alt="Running cspell with Trunk Check" width="800" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqsuoyua3htujj8dg4xq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fqsuoyua3htujj8dg4xq1.png" alt="Running cspell standalone" width="800" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;We end up with a quick case-insensitive search for TODOs, albeit with some messy suggestions. It gets the job done, but getting it production-ready for the rest of our codebase will usually require curating additional dictionaries. Running it on the sample repo flags 22 additional false positive issues.&lt;/p&gt;

                &lt;h1&gt;


                codespell
                &lt;/h1&gt;

                &lt;p&gt;&lt;a href="https://github.com/codespell-project/codespell" rel="noopener noreferrer"&gt;codespell&lt;/a&gt; is a code spellchecker that takes a different approach. Much like CSpell, it is prone to false positives, but rather than defining dictionaries of allowlists, it looks for specific common misspellings and provides suggestions. This reduces its false positive rate, but it usually still requires some tuning. Run &lt;code&gt;trunk check enable codespell&lt;/code&gt; to get started.&lt;/p&gt;

                &lt;p&gt;To teach codespell to flag TODOs, we need to define our own dictionary and reference it:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/todo_dict.txt" rel="noopener noreferrer"&gt;todo_dict.txt&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;todo-&amp;gt;,encountered todo
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/.codespellrc" rel="noopener noreferrer"&gt;.codespellrc&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;[codespell]
                dictionary = todo_dict.txt
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fo5hhjf6nfi16a4h8ir7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fo5hhjf6nfi16a4h8ir7p.png" alt="Running codespell with Trunk Check" width="800" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzkyygeseu587uu449jxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzkyygeseu587uu449jxi.png" alt="Running cspell standalone" width="800" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;Still a bit cumbersome, but we can fine-tune the replacements if desired. Let’s examine some other options.&lt;/p&gt;

                &lt;h1&gt;


                Vale
                &lt;/h1&gt;

                &lt;p&gt;&lt;a href="https://vale.sh/" rel="noopener noreferrer"&gt;Vale&lt;/a&gt; is a code prose checker. It takes a more opinionated approach to editorial style, and thus can require lots of tuning, but it is very extensible. Let’s have it check for TODOs. Run &lt;code&gt;trunk check enable vale&lt;/code&gt; to get started.&lt;/p&gt;

                &lt;p&gt;Vale has an opinionated, nested structure to define its configuration. For now, we will only do the minimum to check for TODOs:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/.vale.ini" rel="noopener noreferrer"&gt;.vale.ini&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="py"&gt;StylesPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"styles"&lt;/span&gt;

                &lt;span class="py"&gt;MinAlertLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;suggestion&lt;/span&gt;
                &lt;span class="py"&gt;Packages&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;base&lt;/span&gt;

                &lt;span class="nn"&gt;[*]&lt;/span&gt;
                &lt;span class="py"&gt;BasedOnStyles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Vale, base&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/styles/base/todo.yml" rel="noopener noreferrer"&gt;styles/base/todo.yml&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;existence&lt;/span&gt;
                &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Don't use TODO&lt;/span&gt;
                &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;warning&lt;/span&gt;
                &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;raw&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
                &lt;span class="na"&gt;tokens&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;TODO&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fosnhc066ke29yd1q6wzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fosnhc066ke29yd1q6wzu.png" alt="Running vale with Trunk Check" width="800" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmk8f3uqf35o81pmzlu22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmk8f3uqf35o81pmzlu22.png" alt="Running vale standalone" width="800" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;If you’re already using Vale, and you’re willing to eat the cost of configuration, it can work quite well! Additionally, you can easily customize which file types and scopes it applies to. Let’s try a few more.&lt;/p&gt;

                &lt;h1&gt;


                Semgrep
                &lt;/h1&gt;

                &lt;p&gt;&lt;a href="https://semgrep.dev/docs/cli-reference" rel="noopener noreferrer"&gt;Semgrep&lt;/a&gt; is a static analysis tool that offers semantic-aware grep. It catches a number of vulnerabilities out of the box, and it’s fairly extensible. It handles most file types, although anecdotally it struggles in some edge cases (e.g. C++ macros, networkless settings). Run &lt;code&gt;trunk check enable semgrep&lt;/code&gt; to get started.&lt;/p&gt;

                &lt;p&gt;Thankfully, Semgrep is configured pretty easily and lets us just specify words or patterns to check for. We can add a config file like so:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/.semgrep.yaml" rel="noopener noreferrer"&gt;.semgrep.yaml&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;check-for-todo&lt;/span&gt;
                &lt;span class="na"&gt;languages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;generic&lt;/span&gt;
                &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ERROR&lt;/span&gt;
                &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Don't use TODO&lt;/span&gt;
                &lt;span class="na"&gt;pattern-either&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TODO&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;todo&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcoeflwo9twrn1i2cg1xf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcoeflwo9twrn1i2cg1xf.png" alt="Running semgrep with Trunk Check" width="800" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fj0l9n76tz8hy086ur4sa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fj0l9n76tz8hy086ur4sa.png" alt="Running semgrep standalone" width="800" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;It works pretty well!! And we can customize it however we want in their &lt;a href="https://semgrep.dev/playground/r/3qUzQD/ievans.print-to-logger?editorMode=advanced" rel="noopener noreferrer"&gt;playground&lt;/a&gt;, even modifying our pattern to require specific TODO styling. Semgrep seems like a decent contender for a best-effort solution, but let’s give a couple more a try.&lt;/p&gt;

                &lt;h1&gt;


                trunk-toolbox
                &lt;/h1&gt;

                &lt;p&gt;trunk-toolbox is our &lt;a href="https://github.com/trunk-io/toolbox" rel="noopener noreferrer"&gt;open-source&lt;/a&gt; homegrown linter Swiss Army knife. It supports a few different rules, including searching for TODO and FIXME. It works on all file types and is available just by running &lt;code&gt;trunk check enable trunk-toolbox&lt;/code&gt;.&lt;/p&gt;

                &lt;p&gt;Enable TODO checking in &lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/toolbox.toml" rel="noopener noreferrer"&gt;toolbox.toml&lt;/a&gt;:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[todo]&lt;/span&gt;
                &lt;span class="py"&gt;enabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7k31c98qnwv9jtz92wqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7k31c98qnwv9jtz92wqe.png" alt="Running trunk-toolbox with Trunk Check" width="800" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fej9q86s1gjsls9hapxft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fej9q86s1gjsls9hapxft.png" alt="Running trunk-toolbox standlone" width="800" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;This immediately accomplishes the stated goal of a TODO linter–if you just want to find TODOs, just use trunk-toolbox–but it isn’t configurable beyond that.&lt;/p&gt;

                &lt;h1&gt;


                Grep Linter
                &lt;/h1&gt;

                &lt;p&gt;Let’s take this one step further. How difficult is it to prototype a solution from scratch? Building a wrapper around grep is the no-brainer solution for this, so let’s start with that.&lt;/p&gt;

                &lt;p&gt;At its simplest, we can build something like:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/plugin.yaml#L27-L46" rel="noopener noreferrer"&gt;.trunk/trunk.yaml&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;todo-grep-linter&lt;/span&gt;
                &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Uses grep to look for TODOs&lt;/span&gt;
                &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
                &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;lint&lt;/span&gt;
                &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c "grep -E -i 'TODO\W' --line-number --with-filename ${target}"&lt;/span&gt;
                &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pass_fail&lt;/span&gt;
                &lt;span class="na"&gt;success_codes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;This &lt;code&gt;pass_fail&lt;/code&gt; linter will just report when we have TODOs. In order to get line numbers, we can wrap this in a script and make it a &lt;code&gt;regex&lt;/code&gt; linter with an output that Trunk Check understands:&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/todo_grep.sh" rel="noopener noreferrer"&gt;todo_grep.sh&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

                &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-euo&lt;/span&gt; pipefail

                &lt;span class="nv"&gt;LINT_TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

                &lt;span class="nv"&gt;TODO_REGEX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"TODO&lt;/span&gt;&lt;span class="se"&gt;\W&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nv"&gt;GREP_FORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([^:]*):([0-9]+):(.*)"&lt;/span&gt;
                &lt;span class="nv"&gt;PARSER_FORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\1&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\2&lt;/span&gt;&lt;span class="s2"&gt;:0: [error] Found TODO in line (TODO)"&lt;/span&gt;

                &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_REGEX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--line-number&lt;/span&gt; &lt;span class="nt"&gt;--with-filename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LINT_TARGET&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s2"&gt;"s/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GREP_FORMAT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PARSER_FORMAT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://github.com/trunk-io/todo-linter-demo/blob/main/plugin.yaml#L27-L46" rel="noopener noreferrer"&gt;.trunk/trunk.yaml&lt;/a&gt;&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;todo-grep-wrapped&lt;/span&gt;
                &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Uses grep to look for TODOs&lt;/span&gt;
                &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
                &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;lint&lt;/span&gt;
                &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sh ${cwd}/todo_grep.sh ${target}&lt;/span&gt;
                &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;regex&lt;/span&gt;
                &lt;span class="na"&gt;parse_regex&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;((?P&amp;lt;path&amp;gt;.*):(?P&amp;lt;line&amp;gt;-?&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;d+):(?P&amp;lt;col&amp;gt;-?&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;d+):&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;[(?P&amp;lt;severity&amp;gt;.*)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(?P&amp;lt;message&amp;gt;.*)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;((?P&amp;lt;code&amp;gt;.*)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;))"&lt;/span&gt;
                &lt;span class="na"&gt;success_codes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm29cxyrkrctb6ja3vyta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm29cxyrkrctb6ja3vyta.png" alt="Running grep-linter with Trunk Check" width="800" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdtgfznn2zk9zcje3x51c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdtgfznn2zk9zcje3x51c.png" alt="Running grep-linter standalone" width="800" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;It’s a bit messy, but it gets the job done. It’s another thing to maintain, but you can tune it as much as you want. We’ll definitely be using one of the pre-built solutions, though.&lt;/p&gt;

                &lt;h1&gt;


                What did we learn?
                &lt;/h1&gt;

                &lt;p&gt;There are more than a couple of reasonable options, and depending on your appetite for configuration vs. plug-and-play, some make more sense than others. But overall, using an existing language-agnostic tool performs much better.&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy7w953tdotxiyas2k6k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy7w953tdotxiyas2k6k9.png" alt="Configurability vs. ease for each option" width="781" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;And regardless of your preference, all of these options can be super-charged by Trunk. Using &lt;a href="https://trunk.io/blog/githook-management" rel="noopener noreferrer"&gt;githooks&lt;/a&gt; and &lt;a href="https://docs.trunk.io/check/check-cloud-ci-integration/get-started" rel="noopener noreferrer"&gt;CI gating&lt;/a&gt;, you can prevent TODOs from ever landing if that’s your taste. Or, you can burn them down incrementally, only tackling new issues with &lt;a href="https://docs.trunk.io/check/reference/under-the-hood#hold-the-line" rel="noopener noreferrer"&gt;Hold the Line&lt;/a&gt;. You can always make TODOs a non-blocking &lt;a href="https://docs.trunk.io/check/configuration#blocking-thresholds" rel="noopener noreferrer"&gt;threshold&lt;/a&gt; if need be, or &lt;a href="https://docs.trunk.io/check/reference/user-yaml" rel="noopener noreferrer"&gt;turn them on for yourself&lt;/a&gt; without blocking your team.&lt;/p&gt;

                &lt;p&gt;We all end up with more TODOs than we’d like, but it’s important to build processes that track them (and if necessary gate them) so they don’t get out of hand, just like any other linting issue. There are lots of reasonable options to choose from, but it’s important to make an informed decision when adopting a generalizable approach to linting.&lt;/p&gt;

                &lt;p&gt;If this post interests you, come check out our other linter definitions in our open-source &lt;a href="https://github.com/trunk-io/plugins" rel="noopener noreferrer"&gt;plugins repo&lt;/a&gt; or come chat with us on &lt;a href="http://slack.trunk.io" rel="noopener noreferrer"&gt;Slack&lt;/a&gt;!&lt;/p&gt;

            </description>
            <category>devops</category>
            <category>linters</category>
            <category>tooling</category>
            <category>tutorial</category>
        </item>
        <item>
            <title>Understanding Vite Flow and Structure in a React Project</title>
            <dc:creator>Vishal Yadav</dc:creator>
            <pubDate>Fri, 12 Jul 2024 03:01:52 +0000</pubDate>
            <link>https://dev.to/vyan/understanding-vite-flow-and-structure-in-a-react-project-2e84</link>
            <guid>https://dev.to/vyan/understanding-vite-flow-and-structure-in-a-react-project-2e84</guid>
            <description>&lt;p&gt;When working with React, Vite offers a streamlined development experience with a few key differences from the traditional Create React App setup. This blog post will explore the structure of a typical Vite project, focusing on key files such as &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;main.jsx&lt;/code&gt;, and &lt;code&gt;App.jsx&lt;/code&gt;.&lt;/p&gt;

                &lt;h2&gt;


                1. index.html
                &lt;/h2&gt;

                &lt;p&gt;In a Vite-powered React application, &lt;code&gt;index.html&lt;/code&gt; serves as a critical starting point. Unlike Create React App, where scripts are injected automatically, Vite requires you to specify the script files directly. This explicit inclusion simplifies understanding the entry points and dependencies of your application.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite + React&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="c"&gt;&amp;lt;!-- The root div where your React app will be mounted --&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/src/main.jsx"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
                &lt;span class="c"&gt;&amp;lt;!-- The script tag importing your main JavaScript module --&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;In this example, you can see the script tag directly loading &lt;code&gt;main.jsx&lt;/code&gt;. This direct inclusion is a major difference from Create React App, enhancing clarity and control over the project's entry points.&lt;/p&gt;

                &lt;h3&gt;


                1.1 Dependencies
                &lt;/h3&gt;

                &lt;p&gt;To ensure your script files load correctly, Vite leverages modern ES module imports. Ensure your &lt;code&gt;package.json&lt;/code&gt; includes necessary dependencies:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^18.2.0"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Explicitly including the script in the HTML file ensures the correct loading and execution order of your application, mitigating potential issues with script loading.&lt;/p&gt;

                &lt;h2&gt;


                2. main.jsx
                &lt;/h2&gt;

                &lt;p&gt;The &lt;code&gt;main.jsx&lt;/code&gt; file serves as the entry point for your React application. This file is responsible for rendering the root component into the DOM. It's typically the file specified in the &lt;code&gt;src&lt;/code&gt; attribute of the script tag in your &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="c1"&gt;// Render the root component into the root element in the HTML&lt;/span&gt;
                &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.StrictMode&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
                &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;In this file, &lt;code&gt;ReactDOM.createRoot&lt;/code&gt; is used to render the &lt;code&gt;App&lt;/code&gt; component into the HTML element with the id &lt;code&gt;root&lt;/code&gt;. This direct rendering approach, without holding any root elements temporarily, streamlines the process, making it clear where the application starts and what components are involved.&lt;/p&gt;

                &lt;h2&gt;


                3. App.jsx
                &lt;/h2&gt;

                &lt;p&gt;The &lt;code&gt;App.jsx&lt;/code&gt; file contains the definition of your main &lt;code&gt;App&lt;/code&gt; component. This component serves as the root of your React component tree.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Vite&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
                &lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
                &lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;};&lt;/span&gt;

                &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;In this file, you define the main structure and behavior of your application. The &lt;code&gt;App&lt;/code&gt; component is where you'll build out the primary UI and functionality, just like you would in any other React project.&lt;/p&gt;

                &lt;h2&gt;


                Additional Materials and Best Practices
                &lt;/h2&gt;

                &lt;h3&gt;


                4. Using Tailwind CSS with Vite
                &lt;/h3&gt;

                &lt;p&gt;Tailwind CSS can be easily integrated into a Vite project for utility-first styling.&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;
                &lt;strong&gt;Install Tailwind CSS:&lt;/strong&gt;
                &lt;/li&gt;
                &lt;/ol&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss postcss autoprefixer
                npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ol&gt;
                &lt;li&gt;&lt;strong&gt;Configure Tailwind:&lt;/strong&gt;&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;Update &lt;code&gt;tailwind.config.js&lt;/code&gt; with your project's specific paths:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.{js,jsx,ts,tsx}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
                &lt;span class="p"&gt;};&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ol&gt;
                &lt;li&gt;&lt;strong&gt;Include Tailwind in your CSS:&lt;/strong&gt;&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;Update &lt;code&gt;index.css&lt;/code&gt; to include Tailwind's base, components, and utilities:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;h3&gt;


                5. Hot Module Replacement (HMR)
                &lt;/h3&gt;

                &lt;p&gt;Vite offers HMR out of the box, allowing you to see changes in real-time without refreshing the page.&lt;/p&gt;

                &lt;h3&gt;


                6. Environment Variables
                &lt;/h3&gt;

                &lt;p&gt;Vite uses &lt;code&gt;.env&lt;/code&gt; files to manage environment variables. Create a &lt;code&gt;.env&lt;/code&gt; file at the root of your project and define your variables:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;VITE_API_URL=https://api.example.com
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Access these variables in your application using &lt;code&gt;import.meta.env&lt;/code&gt;:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_API_URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;h3&gt;


                7. Optimized Build Process
                &lt;/h3&gt;

                &lt;p&gt;Vite's build command (&lt;code&gt;vite build&lt;/code&gt;) uses Rollup under the hood to produce highly optimized static assets for production. This ensures your application is fast and efficient.&lt;/p&gt;

                &lt;h2&gt;


                Conclusion
                &lt;/h2&gt;

                &lt;p&gt;Working with Vite in a React project offers a streamlined and efficient development experience. Understanding the flow and structure of key files like &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;main.jsx&lt;/code&gt;, and &lt;code&gt;App.jsx&lt;/code&gt; can significantly enhance your development process. With the added benefits of Tailwind CSS integration, HMR, and optimized builds, Vite stands out as a modern, powerful tool for React developers.&lt;/p&gt;

                &lt;p&gt;By leveraging these features and best practices, you can create high-performance, scalable, and maintainable applications with ease.&lt;/p&gt;

            </description>
            <category>webdev</category>
            <category>javascript</category>
            <category>beginners</category>
            <category>react</category>
        </item>
        <item>
            <title>Calculating Adaptive Threshold in OpenCV</title>
            <dc:creator>Esther </dc:creator>
            <pubDate>Fri, 12 Jul 2024 02:59:27 +0000</pubDate>
            <link>https://dev.to/catheryn/calculating-adaptive-threshold-in-opencv-1hh3</link>
            <guid>https://dev.to/catheryn/calculating-adaptive-threshold-in-opencv-1hh3</guid>
            <description>&lt;p&gt;&lt;a href="https://dev.to/catheryn/binary-images-image-thresholding-282"&gt;Read my article on Thresholding and Binary Images for a better background&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;Adaptive thresholding is a technique used to convert a grayscale image to a binary image (black and white). The threshold value is calculated for smaller regions (blocks) of the image rather than using a single global threshold value for the entire image.&lt;/p&gt;

                &lt;p&gt;We can perfom adaptive thresholding in OpenCV using this method:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;img = cv2.adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst])
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;An explanation of the arguments:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;
                &lt;strong&gt;src:&lt;/strong&gt; The image to be worked on.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;maxValue:&lt;/strong&gt; The maximum value to use with the thresholding type.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;adaptiveMethod:&lt;/strong&gt; The adaptive thresholding method to use. We have the &lt;a href="https://docs.opencv.org/4.x/d7/d1b/group__imgproc__misc.html" rel="noopener noreferrer"&gt;Adaptive_THRESH_MEAN_C and ADAPTIVE_THRESH_GAUSSIAN_C&lt;/a&gt;.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;thresholdType:&lt;/strong&gt; The type of thresholding to apply. In this article we use the THRESH_BINARY. Read more about the &lt;a href="https://docs.opencv.org/4.x/d7/d1b/group__imgproc__misc.html#gaa9e58d2860d4afa658ef70a9b1115576" rel="noopener noreferrer"&gt;different threshold types&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;blockSize:&lt;/strong&gt; The size of the block to calculate the threshold for.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;C:&lt;/strong&gt; A constant subtracted from the calculated mean. This constant fine-tunes the thresholding.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;h2&gt;


                The Mean Calculation
                &lt;/h2&gt;

                &lt;p&gt;First, we read the image:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Read the original image.
                img = cv2.imread('test_image.png', cv2.IMREAD_GRAYSCALE)

                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Let us assume the image translates to these numbers:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[218 217 216 221 220 220]
                [211 210 210 215 216 216]
                [212 211 211 214 216 216]
                [139 138 137 103 105 105]
                [190 190 190 170 170 170]
                [255 255 255 255 255 255]]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Next, we specify our adaptive thresholding method:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;img_thresh_adp = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 3, 7)
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;ul&gt;
                &lt;li&gt;
                &lt;strong&gt;img:&lt;/strong&gt; This is the image we have translated into numbers using the cv2.imread method.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;255:&lt;/strong&gt; This is the maximum value we are to use after calculations. This means that pixels that are above our result will be set to 255 (white) while the pixels that are below will be set to 0 (black)&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;cv2.ADAPTIVE_THRESH_MEAN_C:&lt;/strong&gt; This is the adaptiveThresholding algorithm. This method calculates the threshold for a pixel based on the mean of a certain number of pixels.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;cv2.THRESH_BINARY:&lt;/strong&gt; THRESH_BINARY means that pixels above the threshold value will be set to the maximum value (255), and pixels below the threshold value will be set to 0.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;3:&lt;/strong&gt; This means a 3 x 3 pixel area around each pixel is considered.&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;7:&lt;/strong&gt; This means after calculating the mean, we subtract 7 from it.&lt;/li&gt;
                &lt;/ul&gt;

                &lt;h2&gt;


                Step-by-Step Calculation
                &lt;/h2&gt;

                &lt;p&gt;&lt;strong&gt;Block 1 (Top-left corner):&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;Consider the 3x3 block starting at the top-left corner:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[218 217 216]
                [211 210 210]
                [212 211 211]]

                Mean: (218 + 217 + 216 + 211 + 210 + 210 + 212 + 211 + 211) / 9 = 212.8
                Subtract constant from result: 212.8 - 7 = 205.8
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Since every single number in block 1 is greater than 205, the numbers are all swapped for 255. Therefore the top left corner becomes this:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[255 255 255]
                [255 255 255]
                [255 255 255]]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;Block 2:&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;Consider the next 3x3 block:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[217 216 221]
                [210 210 215]
                [211 211 214]]

                Mean: 1925 / 9 = 213.8
                Subtract constant: 213.8 - 7 = 206.8
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Every single number in this block is greater than 206 so the numbers are all swapped for 255. Therefore the block becomes:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[255 255 255]
                [255 255 255]
                [255 255 255]]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;These calculations would be done row by row on a 3 x 3 basis until we have calculations for each section. If the current numbers are less than the result, we use 0 else we use 255. Also, note that the numbers are swapped for 255 only because that is what was specified as the maximum.&lt;/p&gt;

                &lt;p&gt;For example, below we have specified a maximum value of 200:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;img_thresh_adp = cv2.adaptiveThreshold(img, 200, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 3, 7)

                # Calculating the top left corner block
                [[218 217 216]
                [211 210 210]
                [212 211 211]]

                # Calculating the mean
                Mean: 1916 / 9 = 212.8
                Subtract constant: 212.8 - 7 = 205.8

                # The result
                [[200 200 200]
                [200 200 200]
                [200 200 200]]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;The resulting image after will always contain a number between 0 and the maxValue specified.&lt;/p&gt;

                &lt;p&gt;I hope this clarifies adaptiveThresholding for someone out there!&lt;/p&gt;

            </description>
            <category>ai</category>
            <category>computervision</category>
        </item>
        <item>
            <title>HealthHub - Your Complete Wellness Companion 🏥💪</title>
            <dc:creator>SNEHA KUMARI</dc:creator>
            <pubDate>Fri, 12 Jul 2024 02:54:55 +0000</pubDate>
            <link>https://dev.to/sneha422/healthhub-your-complete-wellness-companion-37c1</link>
            <guid>https://dev.to/sneha422/healthhub-your-complete-wellness-companion-37c1</guid>
            <description>&lt;p&gt;Welcome to &lt;strong&gt;HealthHub&lt;/strong&gt;, your comprehensive wellness companion designed to help you maintain a healthier lifestyle. This platform integrates cutting-edge AI technology,  with the help of &lt;strong&gt;MindsDB&lt;/strong&gt;, to offer a variety of tools like a &lt;strong&gt;Diagnosis Predictor&lt;/strong&gt;, &lt;strong&gt;Health Chatbot&lt;/strong&gt;, &lt;strong&gt;Weekly Health Planner&lt;/strong&gt;, and &lt;strong&gt;Health Checklist&lt;/strong&gt;.&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://quira.sh/repo/sneha-4-22-Health_assistant-824874405?utm_source=copy&amp;amp;utm_share_context=quests_repos" rel="noopener noreferrer"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6lJR6QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.shields.io/badge/Quira-View%2520Repo-blue" alt="Quira Vote" width="106" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;h2&gt;


                Table of Contents 📑
                &lt;/h2&gt;

                &lt;ul&gt;
                &lt;li&gt;
                Features

                &lt;ul&gt;
                &lt;li&gt;Diagnosis Predictor&lt;/li&gt;
                &lt;li&gt;Health Chatbot&lt;/li&gt;
                &lt;li&gt;Weekly Health Planner&lt;/li&gt;
                &lt;li&gt;Health Checklist&lt;/li&gt;
                &lt;/ul&gt;


                &lt;/li&gt;

                &lt;li&gt;YouTube Demonstration&lt;/li&gt;

                &lt;li&gt;Support&lt;/li&gt;

                &lt;/ul&gt;

                &lt;h2&gt;


                Features 🌟
                &lt;/h2&gt;

                &lt;h3&gt;


                Diagnosis Predictor 🩺
                &lt;/h3&gt;

                &lt;p&gt;Powered by MindsDB, the Diagnosis Predictor analyzes your symptoms and provides accurate health predictions.&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Navigate to the Diagnosis Predictor section.&lt;/li&gt;
                &lt;li&gt;Fill in your age, gender, and symptoms.&lt;/li&gt;
                &lt;li&gt;Click on the "Predict Diagnosis" button.&lt;/li&gt;
                &lt;li&gt;View the predicted diagnosis along with an explanation and confidence level.&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/6d500300-9bfe-46b3-9616-e7fdae5a38e0" rel="noopener noreferrer"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;

                &lt;h3&gt;


                Health Chatbot 🤖
                &lt;/h3&gt;

                &lt;p&gt;The chatbot answers your health queries instantly, providing reliable advice and information. It use MindsDB (gpt 3.5 turbo) mind.&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Navigate to the Health Chatbot section.&lt;/li&gt;
                &lt;li&gt;Type your health-related question in the input box.&lt;/li&gt;
                &lt;li&gt;Click the "Send" button to get an instant response from the chatbot.&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/eabee797-abdd-4b38-bcca-e91a7239356a" rel="noopener noreferrer"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;

                &lt;h3&gt;


                Weekly Health Planner 🗓️
                &lt;/h3&gt;

                &lt;p&gt;Plan your weekly health activities effortlessly with our interactive planner. Based on the user interaction with the chatbot it will automatically generate for them.&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Navigate to the Weekly Health Planner section.&lt;/li&gt;
                &lt;li&gt;Select the start and end dates for your plan.&lt;/li&gt;
                &lt;li&gt;Click on the "Generate Plan" button to receive a detailed weekly health plan.&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/bf48438f-a94c-4596-b79c-06324147883e" rel="noopener noreferrer"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;

                &lt;h3&gt;


                Health Checklist ✅
                &lt;/h3&gt;

                &lt;p&gt;Keep track of your daily health goals with our customizable checklist.&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;Navigate to the Health Checklist section.&lt;/li&gt;
                &lt;li&gt;Add new items to your checklist using the input box and "Add" button.&lt;/li&gt;
                &lt;li&gt;Check off completed items to keep track of your progress.&lt;/li&gt;
                &lt;/ol&gt;

                &lt;p&gt;&lt;a href="https://github.com/user-attachments/assets/6adeace5-b0d2-4e78-915f-add9954b8651" rel="noopener noreferrer"&gt;Demo Video&lt;/a&gt;&lt;/p&gt;

                &lt;h2&gt;


                YouTube Demonstration
                &lt;/h2&gt;

                &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=oDEMWkdwTWs" rel="noopener noreferrer"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEwsex_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.youtube.com/vi/oDEMWkdwTWs/0.jpg" alt="Watch the video" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;h2&gt;


                Support 💬
                &lt;/h2&gt;

                &lt;p&gt;If you like this project, please support it by upvoting on &lt;strong&gt;Quira&lt;/strong&gt; and starring the GitHub repository!&lt;/p&gt;

                &lt;p&gt;&lt;a href="https://quira.sh/repo/sneha-4-22-Health_assistant-824874405?utm_source=copy&amp;amp;utm_share_context=quests_repos" rel="noopener noreferrer"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6lJR6QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://img.shields.io/badge/Quira-View%2520Repo-blue" alt="Quira Repo" width="106" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;Thank you for your support!&lt;/p&gt;

            </description>
            <category>webdev</category>
            <category>programming</category>
            <category>python</category>
            <category>machinelearning</category>
        </item>
        <item>
            <title>Website Traffic Strategies: Comparing SEO and Content Promotion</title>
            <dc:creator>Juddiy</dc:creator>
            <pubDate>Fri, 12 Jul 2024 02:53:11 +0000</pubDate>
            <link>https://dev.to/juddiy/website-traffic-strategies-comparing-seo-and-content-promotion-4m5b</link>
            <guid>https://dev.to/juddiy/website-traffic-strategies-comparing-seo-and-content-promotion-4m5b</guid>
            <description>&lt;p&gt;Hey everyone! So, you're trying to figure out whether SEO or content promotion is better for boosting your website traffic, right? Well, you're in the right place. Both methods are super effective, but they each have their own unique strengths. Let's dive in and see which one might be the best fit for you.&lt;/p&gt;

                &lt;h4&gt;


                What is Search Engine Optimization (SEO)?
                &lt;/h4&gt;

                &lt;p&gt;SEO is all about making your website's content and structure better so it ranks higher on SERPs, which helps bring in more organic traffic. It includes things like keyword research, on-page optimization, technical SEO, and link building. Using &lt;a href="https://seoai.run/" rel="noopener noreferrer"&gt;SEO AI&lt;/a&gt; can help fine-tune your website's content and structure, making sure it follows the latest search engine best practices. The main goal is to make your website easier for search engines to understand and trust, so it shows up higher in relevant searches.&lt;/p&gt;

                &lt;h5&gt;


                Advantages of SEO:
                &lt;/h5&gt;

                &lt;ol&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Long-term Results&lt;/strong&gt;: Once your website ranks high on search engines, you will continuously receive organic traffic without having to pay for each click.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;High-Quality Traffic&lt;/strong&gt;: Traffic obtained through SEO is usually more targeted since users find your website by searching for related keywords.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Brand Trust&lt;/strong&gt;: Websites that rank high are generally seen as more credible and authoritative by users, thereby enhancing your brand image.&lt;/p&gt;&lt;/li&gt;
                &lt;/ol&gt;

                &lt;h4&gt;


                What is Content Promotion?
                &lt;/h4&gt;

                &lt;p&gt;Content promotion involves using various channels (such as social media, email marketing, partner websites, etc.) to promote your content and attract traffic and engagement. The goal of content promotion is to showcase your content to as many relevant audiences as possible, thereby increasing website visits and user engagement.&lt;/p&gt;

                &lt;h5&gt;


                Advantages of Content Promotion:
                &lt;/h5&gt;

                &lt;ol&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Quick Results&lt;/strong&gt;: Through paid ads or social media promotion, you can quickly attract a large amount of traffic.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Diverse Channels&lt;/strong&gt;: Content promotion can be carried out through various channels, giving your content broader exposure and reach.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;High Interactivity&lt;/strong&gt;: Content promotion usually comes with user interaction and feedback, helping to build relationships and communities with users.&lt;/p&gt;&lt;/li&gt;
                &lt;/ol&gt;

                &lt;h4&gt;


                Combining SEO and Content Promotion Strategies
                &lt;/h4&gt;

                &lt;p&gt;In fact, SEO and content promotion are not mutually exclusive but can complement each other. By combining both, you can maximize your website's traffic growth:&lt;/p&gt;

                &lt;ol&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;High-Quality Content Creation&lt;/strong&gt;: First, create high-quality content that is also optimized for SEO. This content will not only help with search engine rankings but also engage users during promotion.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Social Media Promotion&lt;/strong&gt;: Share your SEO-optimized content on social media platforms to attract users to click and visit your website.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Link Building&lt;/strong&gt;: Use content promotion to gain citations and links from other websites, boosting your site's authority and SEO ranking.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Analysis and Optimization&lt;/strong&gt;: Use analytics tools to track the effectiveness of both SEO and content promotion, making continuous adjustments and improvements based on data.&lt;/p&gt;&lt;/li&gt;
                &lt;/ol&gt;




                &lt;p&gt;Overall, both SEO and content promotion have their own advantages. The best strategy is to combine them to achieve maximum traffic growth and brand exposure. I hope these tips help you out! If you have any questions or better insights, feel free to share. Let's work together!&lt;/p&gt;

            </description>
            <category>learning</category>
            <category>website</category>
            <category>seo</category>
        </item>
        <item>
            <title>Binary Images &amp; Image Thresholding</title>
            <dc:creator>Esther </dc:creator>
            <pubDate>Fri, 12 Jul 2024 02:52:04 +0000</pubDate>
            <link>https://dev.to/catheryn/binary-images-image-thresholding-282</link>
            <guid>https://dev.to/catheryn/binary-images-image-thresholding-282</guid>
            <description>&lt;h2&gt;


                Thresholding
                &lt;/h2&gt;

                &lt;p&gt;Thresholding is a simple yet effective technique used in image processing to convert a grayscale image into a binary image. The core idea is to segment the image into two parts (usually 0 and 255) based on a specific threshold value.&lt;/p&gt;

                &lt;p&gt;Thresholding involves setting a threshold value that separates the pixel values of the image into two distinct groups:&lt;/p&gt;

                &lt;ul&gt;
                &lt;li&gt;
                &lt;strong&gt;Pixels above the threshold:&lt;/strong&gt; These pixels are usually set to the maximum value (often 255 for white in binary images).&lt;/li&gt;
                &lt;li&gt;
                &lt;strong&gt;Pixels below or equal to the threshold:&lt;/strong&gt; These pixels are usually set to the minimum value (often 0 for black in binary images).&lt;/li&gt;
                &lt;/ul&gt;

                &lt;h2&gt;


                Types of Thresholding
                &lt;/h2&gt;

                &lt;p&gt;&lt;strong&gt;1. Global Thresholding:&lt;/strong&gt; A single global threshold value is applied to the entire image.&lt;/p&gt;

                &lt;p&gt;Example: Setting all pixel values above 165 to 255 (white) and those below or equal to 165 to 0 (black).&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;cv2.threshold(img, 165, 255, cv2.THRESH_BINARY)

                An image with the following values:
                [[103 105 105]
                [211 210 210]
                [212 211 211]
                [139 138 137]]

                Would become:
                [[0 0 0]
                [255 255 255]
                [255 255 255]
                [0 0 0]]
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;2. Adaptive Thresholding:&lt;/strong&gt; The threshold value is determined for smaller regions of the image, allowing for different threshold values in different parts of the image.&lt;/p&gt;

                &lt;p&gt;Example: Setting all pixel values above the calculated mean to 255 (white) and those below or equal to 165 to 0 (black).&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 3, 7)
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;Read more about how Adaptive Thresholding is calculated.&lt;/p&gt;

                &lt;p&gt;Adaptive thresholding is useful for images with varying lighting conditions. For each pixel, the best possible value is used which results in a clearer image.&lt;/p&gt;

                &lt;h2&gt;


                Binary Image
                &lt;/h2&gt;

                &lt;p&gt;A binary image is a type of image that has only two possible pixel values: 0 and 255. These values represent black and white, respectively. Binary images are used to simplify the analysis of images by reducing the complexity of the data. We use thresholding algorithms to achieve binary images.&lt;/p&gt;

                &lt;h2&gt;


                Significance of Binary Images
                &lt;/h2&gt;

                &lt;ul&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Simplification:&lt;/strong&gt; It reduces the complexity of an image by converting it to two colors, making it easier to analyze.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Segmentation:&lt;/strong&gt; In application of object detection, it can help in isolating objects from the background.&lt;/p&gt;&lt;/li&gt;
                &lt;li&gt;&lt;p&gt;&lt;strong&gt;Feature Extraction:&lt;/strong&gt; It is useful for identifying and extracting specific features from an image, such as shapes or edges.&lt;/p&gt;&lt;/li&gt;
                &lt;/ul&gt;

            </description>
            <category>ai</category>
            <category>opencv</category>
            <category>imagemanipulation</category>
            <category>computervision</category>
        </item>
        <item>
            <title>Docker - Introduction, Architecture, and Most used Commands : Day 5 of 50 days DevOps Tools Series</title>
            <dc:creator>Shiivam Agnihotri</dc:creator>
            <pubDate>Fri, 12 Jul 2024 02:49:12 +0000</pubDate>
            <link>https://dev.to/shivam_agnihotri/docker-introduction-architecture-and-most-used-commands-day-4-of-50-days-devops-tools-series-31pa</link>
            <guid>https://dev.to/shivam_agnihotri/docker-introduction-architecture-and-most-used-commands-day-4-of-50-days-devops-tools-series-31pa</guid>
            <description>&lt;h2&gt;


                &lt;strong&gt;Introduction&lt;/strong&gt;
                &lt;/h2&gt;

                &lt;p&gt;Docker has revolutionised the way we build, ship, and run applications. It enables developers to package applications along with their dependencies into lightweight containers that can run consistently across different environments. In this post, we will dive into Docker’s architecture and cover its basic commands in detail.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Why Docker is Important for DevOps?&lt;/strong&gt;&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Consistency:&lt;/strong&gt; Docker ensures that applications run the same way in development, testing, and production environments.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Isolation:&lt;/strong&gt; Containers provide isolated environments for applications, preventing conflicts and improving security.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Docker makes it easy to scale applications horizontally by adding more containers.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt; Containers are lightweight and use system resources more efficiently compared to traditional virtual machines.&lt;/p&gt;

                &lt;h2&gt;


                Docker Architecture:
                &lt;/h2&gt;

                &lt;p&gt;&lt;a href="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmuuil1srdl98twe9ehhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://media.dev.to/cdn-cgi/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fmuuil1srdl98twe9ehhy.png" alt="Docker Architecture: Image Credit - GeeksForGeeks" width="800" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;Docker architecture consists of the following key components:&lt;/p&gt;

                &lt;p&gt;Docker Client&lt;br&gt;
                Docker Daemon&lt;br&gt;
                Docker Images&lt;br&gt;
                Docker Containers&lt;br&gt;
                Docker Registry&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;1. Docker Client&lt;/strong&gt;&lt;br&gt;
                The Docker client is a command-line interface (CLI) that allows users to interact with Docker. Users can issue commands such as docker build, docker run, and docker stop through the Docker client.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;2. Docker Daemon&lt;/strong&gt;&lt;br&gt;
                The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. It communicates with the Docker client to execute commands.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;3. Docker Images&lt;/strong&gt;&lt;br&gt;
                Docker images are read-only templates that contain the instructions to create a Docker container. Images are built using Dockerfiles, which specify the steps needed to create the image.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;4. Docker Containers&lt;/strong&gt;&lt;br&gt;
                Containers are runnable instances of Docker images. They are isolated environments where applications run with their dependencies. Containers can be started, stopped, and deleted as needed.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;5. Docker Registry&lt;/strong&gt;&lt;br&gt;
                A Docker registry is a storage and distribution system for Docker images. Docker Hub is a public registry, but private registries can also be set up for internal use.&lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Basic Docker Commands&lt;/strong&gt;&lt;br&gt;
                Now, let's explore the basic Docker commands and their usage.&lt;/p&gt;

                &lt;p&gt;docker --version:  Displays the installed Docker version.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker --version
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker info: Provides detailed information about the Docker installation, including the number of containers and images.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker info
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker pull: Pulls an image from a Docker registry.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull &amp;lt;image-name&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker images: Lists all the Docker images available on the system.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker run: Creates and starts a new container from an image.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -it ubuntu
                -it: Runs the container in interactive mode with a terminal.
                ubuntu: Specifies the image to use.
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker ps: Lists all running containers.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;To list all containers (running and stopped), use:&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps -a
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker stop: Stops a running container.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stop &amp;lt;container_id&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker start: Starts a stopped container.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker start &amp;lt;container_id&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker rm: Removes a stopped container.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rm &amp;lt;container_id&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker rmi: Removes a Docker image.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rmi &amp;lt;image_id&amp;gt;
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker build: Builds a Docker image from a Dockerfile.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t my-image:latest .
                -t: Tags the image with a name and optional tag (e.g., my-image:latest).
                .: Specifies the directory containing the Dockerfile.
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker exec: Runs a command in a running container.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it &amp;lt;container_id&amp;gt; /bin/bash
                -it: Runs the command in interactive mode with a terminal.
                /bin/bash: Specifies the command to run (in this case, starting a bash shell).
                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker logs: Fetches the logs of a container.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker logs &amp;lt;container_id&amp;gt;

                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;docker inspect: Displays detailed information about a container or image.&lt;br&gt;
                &lt;/p&gt;

                &lt;div class="highlight js-code-highlight"&gt;
                &lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker inspect &amp;lt;container_id&amp;gt;

                &lt;/code&gt;&lt;/pre&gt;

                &lt;/div&gt;



                &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
                Docker is a powerful tool that simplifies the process of deploying and managing applications in isolated containers. Understanding Docker's architecture and mastering its basic commands are crucial steps for any DevOps engineer. In the next post, we will delve into advanced Docker concepts such as Docker Compose and Docker Swarm.&lt;/p&gt;

                &lt;p&gt;🔄 &lt;em&gt;Subscribe to our blog to get notifications on upcoming posts.&lt;/em&gt;&lt;/p&gt;

                &lt;p&gt;👉 &lt;strong&gt;Be sure to follow me on LinkedIn for the latest updates&lt;/strong&gt;: &lt;a href="https://www.linkedin.com/in/shivam-agnihotri/" rel="noopener noreferrer"&gt;Shiivam Agnihotri&lt;/a&gt;&lt;/p&gt;

            </description>
            <category>docker</category>
            <category>containers</category>
            <category>beginners</category>
            <category>devops</category>
        </item>
    </channel>
</rss>